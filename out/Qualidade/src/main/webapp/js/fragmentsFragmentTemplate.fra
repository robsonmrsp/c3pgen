	
	############################################################################
				Configuração do beans.xml referente aos novos serviços.
	############################################################################
	<jaxrs:server id="services" address="/">
		<jaxrs:serviceBeans>
				<bean class="br.com.sints.app.rs.AnexoResources" />
		<bean class="br.com.sints.app.rs.ApontamentoQualidadePackingResources" />
		<bean class="br.com.sints.app.rs.BolsaoResources" />
		<bean class="br.com.sints.app.rs.CabineResources" />
		<bean class="br.com.sints.app.rs.CargoResources" />
		<bean class="br.com.sints.app.rs.CboResources" />
		<bean class="br.com.sints.app.rs.ClientResources" />
		<bean class="br.com.sints.app.rs.ClienteResources" />
		<bean class="br.com.sints.app.rs.CorResources" />
		<bean class="br.com.sints.app.rs.DepartamentoResources" />
		<bean class="br.com.sints.app.rs.EmbalagemResources" />
		<bean class="br.com.sints.app.rs.FuncaoResources" />
		<bean class="br.com.sints.app.rs.FuncionarioResources" />
		<bean class="br.com.sints.app.rs.GeneradorResources" />
		<bean class="br.com.sints.app.rs.LatadaResources" />
		<bean class="br.com.sints.app.rs.PackingResources" />
		<bean class="br.com.sints.app.rs.SacolaResources" />
		<bean class="br.com.sints.app.rs.VariedadeResources" />
		<bean class="br.com.sints.app.rs.BairroResources" />
		<bean class="br.com.sints.app.rs.CepResources" />
		<bean class="br.com.sints.app.rs.CidadeResources" />
		<bean class="br.com.sints.app.rs.EnderecoResources" />
		<bean class="br.com.sints.app.rs.EstadoResources" />
		<bean class="br.com.sints.app.rs.PaisResources" />
		<bean class="br.com.sints.app.rs.ItemResources" />
		<bean class="br.com.sints.app.rs.ItemTypeResources" />
		<bean class="br.com.sints.app.rs.OperationResources" />
		<bean class="br.com.sints.app.rs.PermissionResources" />
		<bean class="br.com.sints.app.rs.RoleResources" />
		<bean class="br.com.sints.app.rs.SessionResources" />
		<bean class="br.com.sints.app.rs.UserResources" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
		</jaxrs:providers>
	</jaxrs:server>
	
	
	############################################################################
						Router para as entidades criadas
	############################################################################

		var PageAnexo = require('views/anexo/PageAnexo');
		var FormAnexo = require('views/anexo/FormAnexo');
		var AnexoModel = require('models/AnexoModel');
		var PageApontamentoQualidadePacking = require('views/apontamentoQualidadePacking/PageApontamentoQualidadePacking');
		var FormApontamentoQualidadePacking = require('views/apontamentoQualidadePacking/FormApontamentoQualidadePacking');
		var ApontamentoQualidadePackingModel = require('models/ApontamentoQualidadePackingModel');
		var PageBolsao = require('views/bolsao/PageBolsao');
		var FormBolsao = require('views/bolsao/FormBolsao');
		var BolsaoModel = require('models/BolsaoModel');
		var PageCabine = require('views/cabine/PageCabine');
		var FormCabine = require('views/cabine/FormCabine');
		var CabineModel = require('models/CabineModel');
		var PageCargo = require('views/cargo/PageCargo');
		var FormCargo = require('views/cargo/FormCargo');
		var CargoModel = require('models/CargoModel');
		var PageCbo = require('views/cbo/PageCbo');
		var FormCbo = require('views/cbo/FormCbo');
		var CboModel = require('models/CboModel');
		var PageClient = require('views/client/PageClient');
		var FormClient = require('views/client/FormClient');
		var ClientModel = require('models/ClientModel');
		var PageCliente = require('views/cliente/PageCliente');
		var FormCliente = require('views/cliente/FormCliente');
		var ClienteModel = require('models/ClienteModel');
		var PageCor = require('views/cor/PageCor');
		var FormCor = require('views/cor/FormCor');
		var CorModel = require('models/CorModel');
		var PageDepartamento = require('views/departamento/PageDepartamento');
		var FormDepartamento = require('views/departamento/FormDepartamento');
		var DepartamentoModel = require('models/DepartamentoModel');
		var PageEmbalagem = require('views/embalagem/PageEmbalagem');
		var FormEmbalagem = require('views/embalagem/FormEmbalagem');
		var EmbalagemModel = require('models/EmbalagemModel');
		var PageFuncao = require('views/funcao/PageFuncao');
		var FormFuncao = require('views/funcao/FormFuncao');
		var FuncaoModel = require('models/FuncaoModel');
		var PageFuncionario = require('views/funcionario/PageFuncionario');
		var FormFuncionario = require('views/funcionario/FormFuncionario');
		var FuncionarioModel = require('models/FuncionarioModel');
		var PageGenerador = require('views/generador/PageGenerador');
		var FormGenerador = require('views/generador/FormGenerador');
		var GeneradorModel = require('models/GeneradorModel');
		var PageLatada = require('views/latada/PageLatada');
		var FormLatada = require('views/latada/FormLatada');
		var LatadaModel = require('models/LatadaModel');
		var PagePacking = require('views/packing/PagePacking');
		var FormPacking = require('views/packing/FormPacking');
		var PackingModel = require('models/PackingModel');
		var PageSacola = require('views/sacola/PageSacola');
		var FormSacola = require('views/sacola/FormSacola');
		var SacolaModel = require('models/SacolaModel');
		var PageVariedade = require('views/variedade/PageVariedade');
		var FormVariedade = require('views/variedade/FormVariedade');
		var VariedadeModel = require('models/VariedadeModel');
		var PageBairro = require('views/bairro/PageBairro');
		var FormBairro = require('views/bairro/FormBairro');
		var BairroModel = require('models/BairroModel');
		var PageCep = require('views/cep/PageCep');
		var FormCep = require('views/cep/FormCep');
		var CepModel = require('models/CepModel');
		var PageCidade = require('views/cidade/PageCidade');
		var FormCidade = require('views/cidade/FormCidade');
		var CidadeModel = require('models/CidadeModel');
		var PageEndereco = require('views/endereco/PageEndereco');
		var FormEndereco = require('views/endereco/FormEndereco');
		var EnderecoModel = require('models/EnderecoModel');
		var PageEstado = require('views/estado/PageEstado');
		var FormEstado = require('views/estado/FormEstado');
		var EstadoModel = require('models/EstadoModel');
		var PagePais = require('views/pais/PagePais');
		var FormPais = require('views/pais/FormPais');
		var PaisModel = require('models/PaisModel');
		var PageItem = require('views/item/PageItem');
		var FormItem = require('views/item/FormItem');
		var ItemModel = require('models/ItemModel');
		var PageItemType = require('views/itemType/PageItemType');
		var FormItemType = require('views/itemType/FormItemType');
		var ItemTypeModel = require('models/ItemTypeModel');
		var PageOperation = require('views/operation/PageOperation');
		var FormOperation = require('views/operation/FormOperation');
		var OperationModel = require('models/OperationModel');
		var PagePermission = require('views/permission/PagePermission');
		var FormPermission = require('views/permission/FormPermission');
		var PermissionModel = require('models/PermissionModel');
		var PageRole = require('views/role/PageRole');
		var FormRole = require('views/role/FormRole');
		var RoleModel = require('models/RoleModel');
		var PageSession = require('views/session/PageSession');
		var FormSession = require('views/session/FormSession');
		var SessionModel = require('models/SessionModel');
		var PageUser = require('views/user/PageUser');
		var FormUser = require('views/user/FormUser');
		var UserModel = require('models/UserModel');
	
			// hashs de Anexo
			'app/anexos' : 'anexos',
			'app/newAnexo' : 'newAnexo',
			'app/editAnexo/:id' : 'editAnexo',
			// hashs de ApontamentoQualidadePacking
			'app/apontamentoQualidadePackings' : 'apontamentoQualidadePackings',
			'app/newApontamentoQualidadePacking' : 'newApontamentoQualidadePacking',
			'app/editApontamentoQualidadePacking/:id' : 'editApontamentoQualidadePacking',
			// hashs de Bolsao
			'app/bolsaos' : 'bolsaos',
			'app/newBolsao' : 'newBolsao',
			'app/editBolsao/:id' : 'editBolsao',
			// hashs de Cabine
			'app/cabines' : 'cabines',
			'app/newCabine' : 'newCabine',
			'app/editCabine/:id' : 'editCabine',
			// hashs de Cargo
			'app/cargos' : 'cargos',
			'app/newCargo' : 'newCargo',
			'app/editCargo/:id' : 'editCargo',
			// hashs de Cbo
			'app/cbos' : 'cbos',
			'app/newCbo' : 'newCbo',
			'app/editCbo/:id' : 'editCbo',
			// hashs de Client
			'app/clients' : 'clients',
			'app/newClient' : 'newClient',
			'app/editClient/:id' : 'editClient',
			// hashs de Cliente
			'app/clientes' : 'clientes',
			'app/newCliente' : 'newCliente',
			'app/editCliente/:id' : 'editCliente',
			// hashs de Cor
			'app/cors' : 'cors',
			'app/newCor' : 'newCor',
			'app/editCor/:id' : 'editCor',
			// hashs de Departamento
			'app/departamentos' : 'departamentos',
			'app/newDepartamento' : 'newDepartamento',
			'app/editDepartamento/:id' : 'editDepartamento',
			// hashs de Embalagem
			'app/embalagems' : 'embalagems',
			'app/newEmbalagem' : 'newEmbalagem',
			'app/editEmbalagem/:id' : 'editEmbalagem',
			// hashs de Funcao
			'app/funcaos' : 'funcaos',
			'app/newFuncao' : 'newFuncao',
			'app/editFuncao/:id' : 'editFuncao',
			// hashs de Funcionario
			'app/funcionarios' : 'funcionarios',
			'app/newFuncionario' : 'newFuncionario',
			'app/editFuncionario/:id' : 'editFuncionario',
			// hashs de Generador
			'app/generadors' : 'generadors',
			'app/newGenerador' : 'newGenerador',
			'app/editGenerador/:id' : 'editGenerador',
			// hashs de Latada
			'app/latadas' : 'latadas',
			'app/newLatada' : 'newLatada',
			'app/editLatada/:id' : 'editLatada',
			// hashs de Packing
			'app/packings' : 'packings',
			'app/newPacking' : 'newPacking',
			'app/editPacking/:id' : 'editPacking',
			// hashs de Sacola
			'app/sacolas' : 'sacolas',
			'app/newSacola' : 'newSacola',
			'app/editSacola/:id' : 'editSacola',
			// hashs de Variedade
			'app/variedades' : 'variedades',
			'app/newVariedade' : 'newVariedade',
			'app/editVariedade/:id' : 'editVariedade',
			// hashs de Bairro
			'app/bairros' : 'bairros',
			'app/newBairro' : 'newBairro',
			'app/editBairro/:id' : 'editBairro',
			// hashs de Cep
			'app/ceps' : 'ceps',
			'app/newCep' : 'newCep',
			'app/editCep/:id' : 'editCep',
			// hashs de Cidade
			'app/cidades' : 'cidades',
			'app/newCidade' : 'newCidade',
			'app/editCidade/:id' : 'editCidade',
			// hashs de Endereco
			'app/enderecos' : 'enderecos',
			'app/newEndereco' : 'newEndereco',
			'app/editEndereco/:id' : 'editEndereco',
			// hashs de Estado
			'app/estados' : 'estados',
			'app/newEstado' : 'newEstado',
			'app/editEstado/:id' : 'editEstado',
			// hashs de Pais
			'app/paiss' : 'paiss',
			'app/newPais' : 'newPais',
			'app/editPais/:id' : 'editPais',
			// hashs de Item
			'app/items' : 'items',
			'app/newItem' : 'newItem',
			'app/editItem/:id' : 'editItem',
			// hashs de ItemType
			'app/itemTypes' : 'itemTypes',
			'app/newItemType' : 'newItemType',
			'app/editItemType/:id' : 'editItemType',
			// hashs de Operation
			'app/operations' : 'operations',
			'app/newOperation' : 'newOperation',
			'app/editOperation/:id' : 'editOperation',
			// hashs de Permission
			'app/permissions' : 'permissions',
			'app/newPermission' : 'newPermission',
			'app/editPermission/:id' : 'editPermission',
			// hashs de Role
			'app/roles' : 'roles',
			'app/newRole' : 'newRole',
			'app/editRole/:id' : 'editRole',
			// hashs de Session
			'app/sessions' : 'sessions',
			'app/newSession' : 'newSession',
			'app/editSession/:id' : 'editSession',
			// hashs de User
			'app/users' : 'users',
			'app/newUser' : 'newUser',
			'app/editUser/:id' : 'editUser',
			
			//configuração das rotas de Anexo
			appRouter.on('route:anexos', function() {
				util.markActiveItem('anexos');
				appRouter.pageAnexo = new PageAnexo();
				App.mainRegion.show(appRouter.pageAnexo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Anexo',
					itemSubFolderName : 'Grid',
					url : 'app/anexos'
				});
			});
	
			appRouter.on('route:newAnexo', function() {
				util.markActiveItem('anexos');
				var formAnexo = new FormAnexo({
					model : new AnexoModel(),
				});
				App.mainRegion.show(formAnexo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Anexo',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/anexos'
				});
			});
			
			appRouter.on('route:editAnexo', function(idAnexo) {
				util.markActiveItem('anexos');
				var formAnexo = null;
				if (appRouter.pageAnexo) {
					formAnexo = new FormAnexo({
						model : appRouter.pageAnexo.anexos.get(idAnexo),
					});
					App.mainRegion.show(formAnexo);
				} else {
					var model = new AnexoModel({
						id : idAnexo,
					})
					model.fetch({
						success : function(model) {
							formAnexo = new FormAnexo({
								model : model,
							});
							App.mainRegion.show(formAnexo);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Anexoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/anexos'
					});
				}
			});
			//configuração das rotas de ApontamentoQualidadePacking
			appRouter.on('route:apontamentoQualidadePackings', function() {
				util.markActiveItem('apontamentoQualidadePackings');
				appRouter.pageApontamentoQualidadePacking = new PageApontamentoQualidadePacking();
				App.mainRegion.show(appRouter.pageApontamentoQualidadePacking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ApontamentoQualidadePacking',
					itemSubFolderName : 'Grid',
					url : 'app/apontamentoQualidadePackings'
				});
			});
	
			appRouter.on('route:newApontamentoQualidadePacking', function() {
				util.markActiveItem('apontamentoQualidadePackings');
				var formApontamentoQualidadePacking = new FormApontamentoQualidadePacking({
					model : new ApontamentoQualidadePackingModel(),
				});
				App.mainRegion.show(formApontamentoQualidadePacking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ApontamentoQualidadePacking',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/apontamentoQualidadePackings'
				});
			});
			
			appRouter.on('route:editApontamentoQualidadePacking', function(idApontamentoQualidadePacking) {
				util.markActiveItem('apontamentoQualidadePackings');
				var formApontamentoQualidadePacking = null;
				if (appRouter.pageApontamentoQualidadePacking) {
					formApontamentoQualidadePacking = new FormApontamentoQualidadePacking({
						model : appRouter.pageApontamentoQualidadePacking.apontamentoQualidadePackings.get(idApontamentoQualidadePacking),
					});
					App.mainRegion.show(formApontamentoQualidadePacking);
				} else {
					var model = new ApontamentoQualidadePackingModel({
						id : idApontamentoQualidadePacking,
					})
					model.fetch({
						success : function(model) {
							formApontamentoQualidadePacking = new FormApontamentoQualidadePacking({
								model : model,
							});
							App.mainRegion.show(formApontamentoQualidadePacking);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'ApontamentoQualidadePackingos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/apontamentoQualidadePackings'
					});
				}
			});
			//configuração das rotas de Bolsao
			appRouter.on('route:bolsaos', function() {
				util.markActiveItem('bolsaos');
				appRouter.pageBolsao = new PageBolsao();
				App.mainRegion.show(appRouter.pageBolsao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bolsao',
					itemSubFolderName : 'Grid',
					url : 'app/bolsaos'
				});
			});
	
			appRouter.on('route:newBolsao', function() {
				util.markActiveItem('bolsaos');
				var formBolsao = new FormBolsao({
					model : new BolsaoModel(),
				});
				App.mainRegion.show(formBolsao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bolsao',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/bolsaos'
				});
			});
			
			appRouter.on('route:editBolsao', function(idBolsao) {
				util.markActiveItem('bolsaos');
				var formBolsao = null;
				if (appRouter.pageBolsao) {
					formBolsao = new FormBolsao({
						model : appRouter.pageBolsao.bolsaos.get(idBolsao),
					});
					App.mainRegion.show(formBolsao);
				} else {
					var model = new BolsaoModel({
						id : idBolsao,
					})
					model.fetch({
						success : function(model) {
							formBolsao = new FormBolsao({
								model : model,
							});
							App.mainRegion.show(formBolsao);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Bolsaoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/bolsaos'
					});
				}
			});
			//configuração das rotas de Cabine
			appRouter.on('route:cabines', function() {
				util.markActiveItem('cabines');
				appRouter.pageCabine = new PageCabine();
				App.mainRegion.show(appRouter.pageCabine);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cabine',
					itemSubFolderName : 'Grid',
					url : 'app/cabines'
				});
			});
	
			appRouter.on('route:newCabine', function() {
				util.markActiveItem('cabines');
				var formCabine = new FormCabine({
					model : new CabineModel(),
				});
				App.mainRegion.show(formCabine);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cabine',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cabines'
				});
			});
			
			appRouter.on('route:editCabine', function(idCabine) {
				util.markActiveItem('cabines');
				var formCabine = null;
				if (appRouter.pageCabine) {
					formCabine = new FormCabine({
						model : appRouter.pageCabine.cabines.get(idCabine),
					});
					App.mainRegion.show(formCabine);
				} else {
					var model = new CabineModel({
						id : idCabine,
					})
					model.fetch({
						success : function(model) {
							formCabine = new FormCabine({
								model : model,
							});
							App.mainRegion.show(formCabine);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cabineos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cabines'
					});
				}
			});
			//configuração das rotas de Cargo
			appRouter.on('route:cargos', function() {
				util.markActiveItem('cargos');
				appRouter.pageCargo = new PageCargo();
				App.mainRegion.show(appRouter.pageCargo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cargo',
					itemSubFolderName : 'Grid',
					url : 'app/cargos'
				});
			});
	
			appRouter.on('route:newCargo', function() {
				util.markActiveItem('cargos');
				var formCargo = new FormCargo({
					model : new CargoModel(),
				});
				App.mainRegion.show(formCargo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cargo',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cargos'
				});
			});
			
			appRouter.on('route:editCargo', function(idCargo) {
				util.markActiveItem('cargos');
				var formCargo = null;
				if (appRouter.pageCargo) {
					formCargo = new FormCargo({
						model : appRouter.pageCargo.cargos.get(idCargo),
					});
					App.mainRegion.show(formCargo);
				} else {
					var model = new CargoModel({
						id : idCargo,
					})
					model.fetch({
						success : function(model) {
							formCargo = new FormCargo({
								model : model,
							});
							App.mainRegion.show(formCargo);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cargoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cargos'
					});
				}
			});
			//configuração das rotas de Cbo
			appRouter.on('route:cbos', function() {
				util.markActiveItem('cbos');
				appRouter.pageCbo = new PageCbo();
				App.mainRegion.show(appRouter.pageCbo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cbo',
					itemSubFolderName : 'Grid',
					url : 'app/cbos'
				});
			});
	
			appRouter.on('route:newCbo', function() {
				util.markActiveItem('cbos');
				var formCbo = new FormCbo({
					model : new CboModel(),
				});
				App.mainRegion.show(formCbo);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cbo',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cbos'
				});
			});
			
			appRouter.on('route:editCbo', function(idCbo) {
				util.markActiveItem('cbos');
				var formCbo = null;
				if (appRouter.pageCbo) {
					formCbo = new FormCbo({
						model : appRouter.pageCbo.cbos.get(idCbo),
					});
					App.mainRegion.show(formCbo);
				} else {
					var model = new CboModel({
						id : idCbo,
					})
					model.fetch({
						success : function(model) {
							formCbo = new FormCbo({
								model : model,
							});
							App.mainRegion.show(formCbo);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cboos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cbos'
					});
				}
			});
			//configuração das rotas de Client
			appRouter.on('route:clients', function() {
				util.markActiveItem('clients');
				appRouter.pageClient = new PageClient();
				App.mainRegion.show(appRouter.pageClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Grid',
					url : 'app/clients'
				});
			});
	
			appRouter.on('route:newClient', function() {
				util.markActiveItem('clients');
				var formClient = new FormClient({
					model : new ClientModel(),
				});
				App.mainRegion.show(formClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/clients'
				});
			});
			
			appRouter.on('route:editClient', function(idClient) {
				util.markActiveItem('clients');
				var formClient = null;
				if (appRouter.pageClient) {
					formClient = new FormClient({
						model : appRouter.pageClient.clients.get(idClient),
					});
					App.mainRegion.show(formClient);
				} else {
					var model = new ClientModel({
						id : idClient,
					})
					model.fetch({
						success : function(model) {
							formClient = new FormClient({
								model : model,
							});
							App.mainRegion.show(formClient);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Clientos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/clients'
					});
				}
			});
			//configuração das rotas de Cliente
			appRouter.on('route:clientes', function() {
				util.markActiveItem('clientes');
				appRouter.pageCliente = new PageCliente();
				App.mainRegion.show(appRouter.pageCliente);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cliente',
					itemSubFolderName : 'Grid',
					url : 'app/clientes'
				});
			});
	
			appRouter.on('route:newCliente', function() {
				util.markActiveItem('clientes');
				var formCliente = new FormCliente({
					model : new ClienteModel(),
				});
				App.mainRegion.show(formCliente);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cliente',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/clientes'
				});
			});
			
			appRouter.on('route:editCliente', function(idCliente) {
				util.markActiveItem('clientes');
				var formCliente = null;
				if (appRouter.pageCliente) {
					formCliente = new FormCliente({
						model : appRouter.pageCliente.clientes.get(idCliente),
					});
					App.mainRegion.show(formCliente);
				} else {
					var model = new ClienteModel({
						id : idCliente,
					})
					model.fetch({
						success : function(model) {
							formCliente = new FormCliente({
								model : model,
							});
							App.mainRegion.show(formCliente);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Clienteos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/clientes'
					});
				}
			});
			//configuração das rotas de Cor
			appRouter.on('route:cors', function() {
				util.markActiveItem('cors');
				appRouter.pageCor = new PageCor();
				App.mainRegion.show(appRouter.pageCor);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cor',
					itemSubFolderName : 'Grid',
					url : 'app/cors'
				});
			});
	
			appRouter.on('route:newCor', function() {
				util.markActiveItem('cors');
				var formCor = new FormCor({
					model : new CorModel(),
				});
				App.mainRegion.show(formCor);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cor',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cors'
				});
			});
			
			appRouter.on('route:editCor', function(idCor) {
				util.markActiveItem('cors');
				var formCor = null;
				if (appRouter.pageCor) {
					formCor = new FormCor({
						model : appRouter.pageCor.cors.get(idCor),
					});
					App.mainRegion.show(formCor);
				} else {
					var model = new CorModel({
						id : idCor,
					})
					model.fetch({
						success : function(model) {
							formCor = new FormCor({
								model : model,
							});
							App.mainRegion.show(formCor);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Coros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cors'
					});
				}
			});
			//configuração das rotas de Departamento
			appRouter.on('route:departamentos', function() {
				util.markActiveItem('departamentos');
				appRouter.pageDepartamento = new PageDepartamento();
				App.mainRegion.show(appRouter.pageDepartamento);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Departamento',
					itemSubFolderName : 'Grid',
					url : 'app/departamentos'
				});
			});
	
			appRouter.on('route:newDepartamento', function() {
				util.markActiveItem('departamentos');
				var formDepartamento = new FormDepartamento({
					model : new DepartamentoModel(),
				});
				App.mainRegion.show(formDepartamento);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Departamento',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/departamentos'
				});
			});
			
			appRouter.on('route:editDepartamento', function(idDepartamento) {
				util.markActiveItem('departamentos');
				var formDepartamento = null;
				if (appRouter.pageDepartamento) {
					formDepartamento = new FormDepartamento({
						model : appRouter.pageDepartamento.departamentos.get(idDepartamento),
					});
					App.mainRegion.show(formDepartamento);
				} else {
					var model = new DepartamentoModel({
						id : idDepartamento,
					})
					model.fetch({
						success : function(model) {
							formDepartamento = new FormDepartamento({
								model : model,
							});
							App.mainRegion.show(formDepartamento);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Departamentoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/departamentos'
					});
				}
			});
			//configuração das rotas de Embalagem
			appRouter.on('route:embalagems', function() {
				util.markActiveItem('embalagems');
				appRouter.pageEmbalagem = new PageEmbalagem();
				App.mainRegion.show(appRouter.pageEmbalagem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Embalagem',
					itemSubFolderName : 'Grid',
					url : 'app/embalagems'
				});
			});
	
			appRouter.on('route:newEmbalagem', function() {
				util.markActiveItem('embalagems');
				var formEmbalagem = new FormEmbalagem({
					model : new EmbalagemModel(),
				});
				App.mainRegion.show(formEmbalagem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Embalagem',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/embalagems'
				});
			});
			
			appRouter.on('route:editEmbalagem', function(idEmbalagem) {
				util.markActiveItem('embalagems');
				var formEmbalagem = null;
				if (appRouter.pageEmbalagem) {
					formEmbalagem = new FormEmbalagem({
						model : appRouter.pageEmbalagem.embalagems.get(idEmbalagem),
					});
					App.mainRegion.show(formEmbalagem);
				} else {
					var model = new EmbalagemModel({
						id : idEmbalagem,
					})
					model.fetch({
						success : function(model) {
							formEmbalagem = new FormEmbalagem({
								model : model,
							});
							App.mainRegion.show(formEmbalagem);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Embalagemos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/embalagems'
					});
				}
			});
			//configuração das rotas de Funcao
			appRouter.on('route:funcaos', function() {
				util.markActiveItem('funcaos');
				appRouter.pageFuncao = new PageFuncao();
				App.mainRegion.show(appRouter.pageFuncao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Funcao',
					itemSubFolderName : 'Grid',
					url : 'app/funcaos'
				});
			});
	
			appRouter.on('route:newFuncao', function() {
				util.markActiveItem('funcaos');
				var formFuncao = new FormFuncao({
					model : new FuncaoModel(),
				});
				App.mainRegion.show(formFuncao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Funcao',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/funcaos'
				});
			});
			
			appRouter.on('route:editFuncao', function(idFuncao) {
				util.markActiveItem('funcaos');
				var formFuncao = null;
				if (appRouter.pageFuncao) {
					formFuncao = new FormFuncao({
						model : appRouter.pageFuncao.funcaos.get(idFuncao),
					});
					App.mainRegion.show(formFuncao);
				} else {
					var model = new FuncaoModel({
						id : idFuncao,
					})
					model.fetch({
						success : function(model) {
							formFuncao = new FormFuncao({
								model : model,
							});
							App.mainRegion.show(formFuncao);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Funcaoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/funcaos'
					});
				}
			});
			//configuração das rotas de Funcionario
			appRouter.on('route:funcionarios', function() {
				util.markActiveItem('funcionarios');
				appRouter.pageFuncionario = new PageFuncionario();
				App.mainRegion.show(appRouter.pageFuncionario);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Funcionario',
					itemSubFolderName : 'Grid',
					url : 'app/funcionarios'
				});
			});
	
			appRouter.on('route:newFuncionario', function() {
				util.markActiveItem('funcionarios');
				var formFuncionario = new FormFuncionario({
					model : new FuncionarioModel(),
				});
				App.mainRegion.show(formFuncionario);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Funcionario',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/funcionarios'
				});
			});
			
			appRouter.on('route:editFuncionario', function(idFuncionario) {
				util.markActiveItem('funcionarios');
				var formFuncionario = null;
				if (appRouter.pageFuncionario) {
					formFuncionario = new FormFuncionario({
						model : appRouter.pageFuncionario.funcionarios.get(idFuncionario),
					});
					App.mainRegion.show(formFuncionario);
				} else {
					var model = new FuncionarioModel({
						id : idFuncionario,
					})
					model.fetch({
						success : function(model) {
							formFuncionario = new FormFuncionario({
								model : model,
							});
							App.mainRegion.show(formFuncionario);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Funcionarioos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/funcionarios'
					});
				}
			});
			//configuração das rotas de Generador
			appRouter.on('route:generadors', function() {
				util.markActiveItem('generadors');
				appRouter.pageGenerador = new PageGenerador();
				App.mainRegion.show(appRouter.pageGenerador);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Generador',
					itemSubFolderName : 'Grid',
					url : 'app/generadors'
				});
			});
	
			appRouter.on('route:newGenerador', function() {
				util.markActiveItem('generadors');
				var formGenerador = new FormGenerador({
					model : new GeneradorModel(),
				});
				App.mainRegion.show(formGenerador);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Generador',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/generadors'
				});
			});
			
			appRouter.on('route:editGenerador', function(idGenerador) {
				util.markActiveItem('generadors');
				var formGenerador = null;
				if (appRouter.pageGenerador) {
					formGenerador = new FormGenerador({
						model : appRouter.pageGenerador.generadors.get(idGenerador),
					});
					App.mainRegion.show(formGenerador);
				} else {
					var model = new GeneradorModel({
						id : idGenerador,
					})
					model.fetch({
						success : function(model) {
							formGenerador = new FormGenerador({
								model : model,
							});
							App.mainRegion.show(formGenerador);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Generadoros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/generadors'
					});
				}
			});
			//configuração das rotas de Latada
			appRouter.on('route:latadas', function() {
				util.markActiveItem('latadas');
				appRouter.pageLatada = new PageLatada();
				App.mainRegion.show(appRouter.pageLatada);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Latada',
					itemSubFolderName : 'Grid',
					url : 'app/latadas'
				});
			});
	
			appRouter.on('route:newLatada', function() {
				util.markActiveItem('latadas');
				var formLatada = new FormLatada({
					model : new LatadaModel(),
				});
				App.mainRegion.show(formLatada);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Latada',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/latadas'
				});
			});
			
			appRouter.on('route:editLatada', function(idLatada) {
				util.markActiveItem('latadas');
				var formLatada = null;
				if (appRouter.pageLatada) {
					formLatada = new FormLatada({
						model : appRouter.pageLatada.latadas.get(idLatada),
					});
					App.mainRegion.show(formLatada);
				} else {
					var model = new LatadaModel({
						id : idLatada,
					})
					model.fetch({
						success : function(model) {
							formLatada = new FormLatada({
								model : model,
							});
							App.mainRegion.show(formLatada);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Latadaos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/latadas'
					});
				}
			});
			//configuração das rotas de Packing
			appRouter.on('route:packings', function() {
				util.markActiveItem('packings');
				appRouter.pagePacking = new PagePacking();
				App.mainRegion.show(appRouter.pagePacking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Packing',
					itemSubFolderName : 'Grid',
					url : 'app/packings'
				});
			});
	
			appRouter.on('route:newPacking', function() {
				util.markActiveItem('packings');
				var formPacking = new FormPacking({
					model : new PackingModel(),
				});
				App.mainRegion.show(formPacking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Packing',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/packings'
				});
			});
			
			appRouter.on('route:editPacking', function(idPacking) {
				util.markActiveItem('packings');
				var formPacking = null;
				if (appRouter.pagePacking) {
					formPacking = new FormPacking({
						model : appRouter.pagePacking.packings.get(idPacking),
					});
					App.mainRegion.show(formPacking);
				} else {
					var model = new PackingModel({
						id : idPacking,
					})
					model.fetch({
						success : function(model) {
							formPacking = new FormPacking({
								model : model,
							});
							App.mainRegion.show(formPacking);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Packingos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/packings'
					});
				}
			});
			//configuração das rotas de Sacola
			appRouter.on('route:sacolas', function() {
				util.markActiveItem('sacolas');
				appRouter.pageSacola = new PageSacola();
				App.mainRegion.show(appRouter.pageSacola);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Sacola',
					itemSubFolderName : 'Grid',
					url : 'app/sacolas'
				});
			});
	
			appRouter.on('route:newSacola', function() {
				util.markActiveItem('sacolas');
				var formSacola = new FormSacola({
					model : new SacolaModel(),
				});
				App.mainRegion.show(formSacola);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Sacola',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/sacolas'
				});
			});
			
			appRouter.on('route:editSacola', function(idSacola) {
				util.markActiveItem('sacolas');
				var formSacola = null;
				if (appRouter.pageSacola) {
					formSacola = new FormSacola({
						model : appRouter.pageSacola.sacolas.get(idSacola),
					});
					App.mainRegion.show(formSacola);
				} else {
					var model = new SacolaModel({
						id : idSacola,
					})
					model.fetch({
						success : function(model) {
							formSacola = new FormSacola({
								model : model,
							});
							App.mainRegion.show(formSacola);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Sacolaos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/sacolas'
					});
				}
			});
			//configuração das rotas de Variedade
			appRouter.on('route:variedades', function() {
				util.markActiveItem('variedades');
				appRouter.pageVariedade = new PageVariedade();
				App.mainRegion.show(appRouter.pageVariedade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Variedade',
					itemSubFolderName : 'Grid',
					url : 'app/variedades'
				});
			});
	
			appRouter.on('route:newVariedade', function() {
				util.markActiveItem('variedades');
				var formVariedade = new FormVariedade({
					model : new VariedadeModel(),
				});
				App.mainRegion.show(formVariedade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Variedade',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/variedades'
				});
			});
			
			appRouter.on('route:editVariedade', function(idVariedade) {
				util.markActiveItem('variedades');
				var formVariedade = null;
				if (appRouter.pageVariedade) {
					formVariedade = new FormVariedade({
						model : appRouter.pageVariedade.variedades.get(idVariedade),
					});
					App.mainRegion.show(formVariedade);
				} else {
					var model = new VariedadeModel({
						id : idVariedade,
					})
					model.fetch({
						success : function(model) {
							formVariedade = new FormVariedade({
								model : model,
							});
							App.mainRegion.show(formVariedade);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Variedadeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/variedades'
					});
				}
			});
			//configuração das rotas de Bairro
			appRouter.on('route:bairros', function() {
				util.markActiveItem('bairros');
				appRouter.pageBairro = new PageBairro();
				App.mainRegion.show(appRouter.pageBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Grid',
					url : 'app/bairros'
				});
			});
	
			appRouter.on('route:newBairro', function() {
				util.markActiveItem('bairros');
				var formBairro = new FormBairro({
					model : new BairroModel(),
				});
				App.mainRegion.show(formBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/bairros'
				});
			});
			
			appRouter.on('route:editBairro', function(idBairro) {
				util.markActiveItem('bairros');
				var formBairro = null;
				if (appRouter.pageBairro) {
					formBairro = new FormBairro({
						model : appRouter.pageBairro.bairros.get(idBairro),
					});
					App.mainRegion.show(formBairro);
				} else {
					var model = new BairroModel({
						id : idBairro,
					})
					model.fetch({
						success : function(model) {
							formBairro = new FormBairro({
								model : model,
							});
							App.mainRegion.show(formBairro);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Bairroos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/bairros'
					});
				}
			});
			//configuração das rotas de Cep
			appRouter.on('route:ceps', function() {
				util.markActiveItem('ceps');
				appRouter.pageCep = new PageCep();
				App.mainRegion.show(appRouter.pageCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Grid',
					url : 'app/ceps'
				});
			});
	
			appRouter.on('route:newCep', function() {
				util.markActiveItem('ceps');
				var formCep = new FormCep({
					model : new CepModel(),
				});
				App.mainRegion.show(formCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/ceps'
				});
			});
			
			appRouter.on('route:editCep', function(idCep) {
				util.markActiveItem('ceps');
				var formCep = null;
				if (appRouter.pageCep) {
					formCep = new FormCep({
						model : appRouter.pageCep.ceps.get(idCep),
					});
					App.mainRegion.show(formCep);
				} else {
					var model = new CepModel({
						id : idCep,
					})
					model.fetch({
						success : function(model) {
							formCep = new FormCep({
								model : model,
							});
							App.mainRegion.show(formCep);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cepos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/ceps'
					});
				}
			});
			//configuração das rotas de Cidade
			appRouter.on('route:cidades', function() {
				util.markActiveItem('cidades');
				appRouter.pageCidade = new PageCidade();
				App.mainRegion.show(appRouter.pageCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Grid',
					url : 'app/cidades'
				});
			});
	
			appRouter.on('route:newCidade', function() {
				util.markActiveItem('cidades');
				var formCidade = new FormCidade({
					model : new CidadeModel(),
				});
				App.mainRegion.show(formCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cidades'
				});
			});
			
			appRouter.on('route:editCidade', function(idCidade) {
				util.markActiveItem('cidades');
				var formCidade = null;
				if (appRouter.pageCidade) {
					formCidade = new FormCidade({
						model : appRouter.pageCidade.cidades.get(idCidade),
					});
					App.mainRegion.show(formCidade);
				} else {
					var model = new CidadeModel({
						id : idCidade,
					})
					model.fetch({
						success : function(model) {
							formCidade = new FormCidade({
								model : model,
							});
							App.mainRegion.show(formCidade);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cidadeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cidades'
					});
				}
			});
			//configuração das rotas de Endereco
			appRouter.on('route:enderecos', function() {
				util.markActiveItem('enderecos');
				appRouter.pageEndereco = new PageEndereco();
				App.mainRegion.show(appRouter.pageEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Grid',
					url : 'app/enderecos'
				});
			});
	
			appRouter.on('route:newEndereco', function() {
				util.markActiveItem('enderecos');
				var formEndereco = new FormEndereco({
					model : new EnderecoModel(),
				});
				App.mainRegion.show(formEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/enderecos'
				});
			});
			
			appRouter.on('route:editEndereco', function(idEndereco) {
				util.markActiveItem('enderecos');
				var formEndereco = null;
				if (appRouter.pageEndereco) {
					formEndereco = new FormEndereco({
						model : appRouter.pageEndereco.enderecos.get(idEndereco),
					});
					App.mainRegion.show(formEndereco);
				} else {
					var model = new EnderecoModel({
						id : idEndereco,
					})
					model.fetch({
						success : function(model) {
							formEndereco = new FormEndereco({
								model : model,
							});
							App.mainRegion.show(formEndereco);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Enderecoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/enderecos'
					});
				}
			});
			//configuração das rotas de Estado
			appRouter.on('route:estados', function() {
				util.markActiveItem('estados');
				appRouter.pageEstado = new PageEstado();
				App.mainRegion.show(appRouter.pageEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Grid',
					url : 'app/estados'
				});
			});
	
			appRouter.on('route:newEstado', function() {
				util.markActiveItem('estados');
				var formEstado = new FormEstado({
					model : new EstadoModel(),
				});
				App.mainRegion.show(formEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/estados'
				});
			});
			
			appRouter.on('route:editEstado', function(idEstado) {
				util.markActiveItem('estados');
				var formEstado = null;
				if (appRouter.pageEstado) {
					formEstado = new FormEstado({
						model : appRouter.pageEstado.estados.get(idEstado),
					});
					App.mainRegion.show(formEstado);
				} else {
					var model = new EstadoModel({
						id : idEstado,
					})
					model.fetch({
						success : function(model) {
							formEstado = new FormEstado({
								model : model,
							});
							App.mainRegion.show(formEstado);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Estadoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/estados'
					});
				}
			});
			//configuração das rotas de Pais
			appRouter.on('route:paiss', function() {
				util.markActiveItem('paiss');
				appRouter.pagePais = new PagePais();
				App.mainRegion.show(appRouter.pagePais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Grid',
					url : 'app/paiss'
				});
			});
	
			appRouter.on('route:newPais', function() {
				util.markActiveItem('paiss');
				var formPais = new FormPais({
					model : new PaisModel(),
				});
				App.mainRegion.show(formPais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/paiss'
				});
			});
			
			appRouter.on('route:editPais', function(idPais) {
				util.markActiveItem('paiss');
				var formPais = null;
				if (appRouter.pagePais) {
					formPais = new FormPais({
						model : appRouter.pagePais.paiss.get(idPais),
					});
					App.mainRegion.show(formPais);
				} else {
					var model = new PaisModel({
						id : idPais,
					})
					model.fetch({
						success : function(model) {
							formPais = new FormPais({
								model : model,
							});
							App.mainRegion.show(formPais);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Paisos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/paiss'
					});
				}
			});
			//configuração das rotas de Item
			appRouter.on('route:items', function() {
				util.markActiveItem('items');
				appRouter.pageItem = new PageItem();
				App.mainRegion.show(appRouter.pageItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Grid',
					url : 'app/items'
				});
			});
	
			appRouter.on('route:newItem', function() {
				util.markActiveItem('items');
				var formItem = new FormItem({
					model : new ItemModel(),
				});
				App.mainRegion.show(formItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/items'
				});
			});
			
			appRouter.on('route:editItem', function(idItem) {
				util.markActiveItem('items');
				var formItem = null;
				if (appRouter.pageItem) {
					formItem = new FormItem({
						model : appRouter.pageItem.items.get(idItem),
					});
					App.mainRegion.show(formItem);
				} else {
					var model = new ItemModel({
						id : idItem,
					})
					model.fetch({
						success : function(model) {
							formItem = new FormItem({
								model : model,
							});
							App.mainRegion.show(formItem);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Itemos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/items'
					});
				}
			});
			//configuração das rotas de ItemType
			appRouter.on('route:itemTypes', function() {
				util.markActiveItem('itemTypes');
				appRouter.pageItemType = new PageItemType();
				App.mainRegion.show(appRouter.pageItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Grid',
					url : 'app/itemTypes'
				});
			});
	
			appRouter.on('route:newItemType', function() {
				util.markActiveItem('itemTypes');
				var formItemType = new FormItemType({
					model : new ItemTypeModel(),
				});
				App.mainRegion.show(formItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/itemTypes'
				});
			});
			
			appRouter.on('route:editItemType', function(idItemType) {
				util.markActiveItem('itemTypes');
				var formItemType = null;
				if (appRouter.pageItemType) {
					formItemType = new FormItemType({
						model : appRouter.pageItemType.itemTypes.get(idItemType),
					});
					App.mainRegion.show(formItemType);
				} else {
					var model = new ItemTypeModel({
						id : idItemType,
					})
					model.fetch({
						success : function(model) {
							formItemType = new FormItemType({
								model : model,
							});
							App.mainRegion.show(formItemType);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'ItemTypeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/itemTypes'
					});
				}
			});
			//configuração das rotas de Operation
			appRouter.on('route:operations', function() {
				util.markActiveItem('operations');
				appRouter.pageOperation = new PageOperation();
				App.mainRegion.show(appRouter.pageOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Grid',
					url : 'app/operations'
				});
			});
	
			appRouter.on('route:newOperation', function() {
				util.markActiveItem('operations');
				var formOperation = new FormOperation({
					model : new OperationModel(),
				});
				App.mainRegion.show(formOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/operations'
				});
			});
			
			appRouter.on('route:editOperation', function(idOperation) {
				util.markActiveItem('operations');
				var formOperation = null;
				if (appRouter.pageOperation) {
					formOperation = new FormOperation({
						model : appRouter.pageOperation.operations.get(idOperation),
					});
					App.mainRegion.show(formOperation);
				} else {
					var model = new OperationModel({
						id : idOperation,
					})
					model.fetch({
						success : function(model) {
							formOperation = new FormOperation({
								model : model,
							});
							App.mainRegion.show(formOperation);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Operationos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/operations'
					});
				}
			});
			//configuração das rotas de Permission
			appRouter.on('route:permissions', function() {
				util.markActiveItem('permissions');
				appRouter.pagePermission = new PagePermission();
				App.mainRegion.show(appRouter.pagePermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Grid',
					url : 'app/permissions'
				});
			});
	
			appRouter.on('route:newPermission', function() {
				util.markActiveItem('permissions');
				var formPermission = new FormPermission({
					model : new PermissionModel(),
				});
				App.mainRegion.show(formPermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/permissions'
				});
			});
			
			appRouter.on('route:editPermission', function(idPermission) {
				util.markActiveItem('permissions');
				var formPermission = null;
				if (appRouter.pagePermission) {
					formPermission = new FormPermission({
						model : appRouter.pagePermission.permissions.get(idPermission),
					});
					App.mainRegion.show(formPermission);
				} else {
					var model = new PermissionModel({
						id : idPermission,
					})
					model.fetch({
						success : function(model) {
							formPermission = new FormPermission({
								model : model,
							});
							App.mainRegion.show(formPermission);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Permissionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/permissions'
					});
				}
			});
			//configuração das rotas de Role
			appRouter.on('route:roles', function() {
				util.markActiveItem('roles');
				appRouter.pageRole = new PageRole();
				App.mainRegion.show(appRouter.pageRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Grid',
					url : 'app/roles'
				});
			});
	
			appRouter.on('route:newRole', function() {
				util.markActiveItem('roles');
				var formRole = new FormRole({
					model : new RoleModel(),
				});
				App.mainRegion.show(formRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/roles'
				});
			});
			
			appRouter.on('route:editRole', function(idRole) {
				util.markActiveItem('roles');
				var formRole = null;
				if (appRouter.pageRole) {
					formRole = new FormRole({
						model : appRouter.pageRole.roles.get(idRole),
					});
					App.mainRegion.show(formRole);
				} else {
					var model = new RoleModel({
						id : idRole,
					})
					model.fetch({
						success : function(model) {
							formRole = new FormRole({
								model : model,
							});
							App.mainRegion.show(formRole);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Roleos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/roles'
					});
				}
			});
			//configuração das rotas de Session
			appRouter.on('route:sessions', function() {
				util.markActiveItem('sessions');
				appRouter.pageSession = new PageSession();
				App.mainRegion.show(appRouter.pageSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Grid',
					url : 'app/sessions'
				});
			});
	
			appRouter.on('route:newSession', function() {
				util.markActiveItem('sessions');
				var formSession = new FormSession({
					model : new SessionModel(),
				});
				App.mainRegion.show(formSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/sessions'
				});
			});
			
			appRouter.on('route:editSession', function(idSession) {
				util.markActiveItem('sessions');
				var formSession = null;
				if (appRouter.pageSession) {
					formSession = new FormSession({
						model : appRouter.pageSession.sessions.get(idSession),
					});
					App.mainRegion.show(formSession);
				} else {
					var model = new SessionModel({
						id : idSession,
					})
					model.fetch({
						success : function(model) {
							formSession = new FormSession({
								model : model,
							});
							App.mainRegion.show(formSession);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Sessionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/sessions'
					});
				}
			});
			//configuração das rotas de User
			appRouter.on('route:users', function() {
				util.markActiveItem('users');
				appRouter.pageUser = new PageUser();
				App.mainRegion.show(appRouter.pageUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Grid',
					url : 'app/users'
				});
			});
	
			appRouter.on('route:newUser', function() {
				util.markActiveItem('users');
				var formUser = new FormUser({
					model : new UserModel(),
				});
				App.mainRegion.show(formUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/users'
				});
			});
			
			appRouter.on('route:editUser', function(idUser) {
				util.markActiveItem('users');
				var formUser = null;
				if (appRouter.pageUser) {
					formUser = new FormUser({
						model : appRouter.pageUser.users.get(idUser),
					});
					App.mainRegion.show(formUser);
				} else {
					var model = new UserModel({
						id : idUser,
					})
					model.fetch({
						success : function(model) {
							formUser = new FormUser({
								model : model,
							});
							App.mainRegion.show(formUser);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Useros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/users'
					});
				}
			});
			

	############################################################################
						Menu de cadastros
	############################################################################
			<li id="anexos" class="">
				<a href="#app/anexos">
					<i class="menu-icon fa fa-caret-right"></i>
					Anexo
				</a>
				<b class="arrow"></b>
			</li>
			<li id="apontamentoQualidadePackings" class="">
				<a href="#app/apontamentoQualidadePackings">
					<i class="menu-icon fa fa-caret-right"></i>
					Apontamento qualidade packing
				</a>
				<b class="arrow"></b>
			</li>
			<li id="bolsaos" class="">
				<a href="#app/bolsaos">
					<i class="menu-icon fa fa-caret-right"></i>
					Bolsao
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cabines" class="">
				<a href="#app/cabines">
					<i class="menu-icon fa fa-caret-right"></i>
					Cabine
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cargos" class="">
				<a href="#app/cargos">
					<i class="menu-icon fa fa-caret-right"></i>
					Cargo
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cbos" class="">
				<a href="#app/cbos">
					<i class="menu-icon fa fa-caret-right"></i>
					Cbo
				</a>
				<b class="arrow"></b>
			</li>
			<li id="clients" class="">
				<a href="#app/clients">
					<i class="menu-icon fa fa-caret-right"></i>
					Empresa
				</a>
				<b class="arrow"></b>
			</li>
			<li id="clientes" class="">
				<a href="#app/clientes">
					<i class="menu-icon fa fa-caret-right"></i>
					Cliente
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cors" class="">
				<a href="#app/cors">
					<i class="menu-icon fa fa-caret-right"></i>
					Cor
				</a>
				<b class="arrow"></b>
			</li>
			<li id="departamentos" class="">
				<a href="#app/departamentos">
					<i class="menu-icon fa fa-caret-right"></i>
					Departamento
				</a>
				<b class="arrow"></b>
			</li>
			<li id="embalagems" class="">
				<a href="#app/embalagems">
					<i class="menu-icon fa fa-caret-right"></i>
					Embalagem
				</a>
				<b class="arrow"></b>
			</li>
			<li id="funcaos" class="">
				<a href="#app/funcaos">
					<i class="menu-icon fa fa-caret-right"></i>
					Funcao
				</a>
				<b class="arrow"></b>
			</li>
			<li id="funcionarios" class="">
				<a href="#app/funcionarios">
					<i class="menu-icon fa fa-caret-right"></i>
					Funcionario
				</a>
				<b class="arrow"></b>
			</li>
			<li id="generadors" class="">
				<a href="#app/generadors">
					<i class="menu-icon fa fa-caret-right"></i>
					Generador
				</a>
				<b class="arrow"></b>
			</li>
			<li id="latadas" class="">
				<a href="#app/latadas">
					<i class="menu-icon fa fa-caret-right"></i>
					Latada
				</a>
				<b class="arrow"></b>
			</li>
			<li id="packings" class="">
				<a href="#app/packings">
					<i class="menu-icon fa fa-caret-right"></i>
					Packing
				</a>
				<b class="arrow"></b>
			</li>
			<li id="sacolas" class="">
				<a href="#app/sacolas">
					<i class="menu-icon fa fa-caret-right"></i>
					Sacola
				</a>
				<b class="arrow"></b>
			</li>
			<li id="variedades" class="">
				<a href="#app/variedades">
					<i class="menu-icon fa fa-caret-right"></i>
					Variedade
				</a>
				<b class="arrow"></b>
			</li>
			<li id="bairros" class="">
				<a href="#app/bairros">
					<i class="menu-icon fa fa-caret-right"></i>
					Bairro
				</a>
				<b class="arrow"></b>
			</li>
			<li id="ceps" class="">
				<a href="#app/ceps">
					<i class="menu-icon fa fa-caret-right"></i>
					Cep
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cidades" class="">
				<a href="#app/cidades">
					<i class="menu-icon fa fa-caret-right"></i>
					Cidade
				</a>
				<b class="arrow"></b>
			</li>
			<li id="enderecos" class="">
				<a href="#app/enderecos">
					<i class="menu-icon fa fa-caret-right"></i>
					Endereco
				</a>
				<b class="arrow"></b>
			</li>
			<li id="estados" class="">
				<a href="#app/estados">
					<i class="menu-icon fa fa-caret-right"></i>
					Estado
				</a>
				<b class="arrow"></b>
			</li>
			<li id="paiss" class="">
				<a href="#app/paiss">
					<i class="menu-icon fa fa-caret-right"></i>
					Pais
				</a>
				<b class="arrow"></b>
			</li>
			<li id="items" class="">
				<a href="#app/items">
					<i class="menu-icon fa fa-caret-right"></i>
					Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="itemTypes" class="">
				<a href="#app/itemTypes">
					<i class="menu-icon fa fa-caret-right"></i>
					Tipo de Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="operations" class="">
				<a href="#app/operations">
					<i class="menu-icon fa fa-caret-right"></i>
					Operação
				</a>
				<b class="arrow"></b>
			</li>
			<li id="permissions" class="">
				<a href="#app/permissions">
					<i class="menu-icon fa fa-caret-right"></i>
					Permissão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="roles" class="">
				<a href="#app/roles">
					<i class="menu-icon fa fa-caret-right"></i>
					Papel
				</a>
				<b class="arrow"></b>
			</li>
			<li id="sessions" class="">
				<a href="#app/sessions">
					<i class="menu-icon fa fa-caret-right"></i>
					Sessão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="users" class="">
				<a href="#app/users">
					<i class="menu-icon fa fa-caret-right"></i>
					Usuário
				</a>
				<b class="arrow"></b>
			</li>
		
	############################################################################
						Parser json-> objeto objeto -> json
	############################################################################
	//converte de entidade para json
	public static JsonAnexo toJson(Anexo anexo) {
		JsonAnexo jsonAnexo = new JsonAnexo();
		
		jsonAnexo.setId(anexo.getId());
	    jsonAnexo.setNome(anexo.getNome());
	    jsonAnexo.setConteudo(anexo.getConteudo());
		jsonAnexo.setApontamentoQualidadePacking(toJson(anexo.getApontamentoQualidadePacking()));		
		return jsonAnexo;
	}

	public static Anexo toEntity(JsonAnexo jsonAnexo) {
		Anexo anexo = new Anexo();
		
		anexo.setId(jsonAnexo.getId());
		anexo.setNome(jsonAnexo.getNome());
		anexo.setConteudo(jsonAnexo.getConteudo());
		anexo.setApontamentoQualidadePacking(toEntity(jsonAnexo.getApontamentoQualidadePacking()));					
		return anexo;
	}		
	
	public static List<JsonAnexo> toListJsonAnexos(List<Anexo> all) {
		List<JsonAnexo> jsonAnexos = new ArrayList<JsonAnexo>();
		for (Anexo anexo : all) {
			jsonAnexos.add(toJson(anexo));
		}
		return jsonAnexos;
	}
	//converte de entidade para json
	public static JsonApontamentoQualidadePacking toJson(ApontamentoQualidadePacking apontamentoQualidadePacking) {
		JsonApontamentoQualidadePacking jsonApontamentoQualidadePacking = new JsonApontamentoQualidadePacking();
		
		jsonApontamentoQualidadePacking.setId(apontamentoQualidadePacking.getId());
	    jsonApontamentoQualidadePacking.setAparencia(apontamentoQualidadePacking.getAparencia());
	    jsonApontamentoQualidadePacking.setDiametroMinimo(apontamentoQualidadePacking.getDiametroMinimo());
	    jsonApontamentoQualidadePacking.setDiametroMaximo(apontamentoQualidadePacking.getDiametroMaximo());
	    jsonApontamentoQualidadePacking.setDiametroMedio(apontamentoQualidadePacking.getDiametroMedio());
	    jsonApontamentoQualidadePacking.setBrixMinimo(apontamentoQualidadePacking.getBrixMinimo());
	    jsonApontamentoQualidadePacking.setBrixMaximo(apontamentoQualidadePacking.getBrixMaximo());
	    jsonApontamentoQualidadePacking.setBrixMedio(apontamentoQualidadePacking.getBrixMedio());
	    jsonApontamentoQualidadePacking.setPesoCachoMinimo(apontamentoQualidadePacking.getPesoCachoMinimo());
	    jsonApontamentoQualidadePacking.setPesoCachoMaximo(apontamentoQualidadePacking.getPesoCachoMaximo());
	    jsonApontamentoQualidadePacking.setPesoSacolaMinimo(apontamentoQualidadePacking.getPesoSacolaMinimo());
	    jsonApontamentoQualidadePacking.setPesoSacolaMaximo(apontamentoQualidadePacking.getPesoSacolaMaximo());
	    jsonApontamentoQualidadePacking.setNumeroCachoSacola(apontamentoQualidadePacking.getNumeroCachoSacola());
	    jsonApontamentoQualidadePacking.setNumeroSacola(apontamentoQualidadePacking.getNumeroSacola());
	    jsonApontamentoQualidadePacking.setPesoCumbucaMinimo(apontamentoQualidadePacking.getPesoCumbucaMinimo());
	    jsonApontamentoQualidadePacking.setPesoCumbucaMaximo(apontamentoQualidadePacking.getPesoCumbucaMaximo());
	    jsonApontamentoQualidadePacking.setNumeroCachosCumbuca(apontamentoQualidadePacking.getNumeroCachosCumbuca());
	    jsonApontamentoQualidadePacking.setNumeroCumbucas(apontamentoQualidadePacking.getNumeroCumbucas());
	    jsonApontamentoQualidadePacking.setPesoBruto(apontamentoQualidadePacking.getPesoBruto());
	    jsonApontamentoQualidadePacking.setPesoLiquido(apontamentoQualidadePacking.getPesoLiquido());
	    jsonApontamentoQualidadePacking.setCorposEstranhos(apontamentoQualidadePacking.getCorposEstranhos());
	    jsonApontamentoQualidadePacking.setBagasAquosas(apontamentoQualidadePacking.getBagasAquosas());
	    jsonApontamentoQualidadePacking.setBagasCristalinas(apontamentoQualidadePacking.getBagasCristalinas());
	    jsonApontamentoQualidadePacking.setFirmeza(apontamentoQualidadePacking.getFirmeza());
	    jsonApontamentoQualidadePacking.setDanos(apontamentoQualidadePacking.getDanos());
	    jsonApontamentoQualidadePacking.setPragas(apontamentoQualidadePacking.getPragas());
	    jsonApontamentoQualidadePacking.setDoencas(apontamentoQualidadePacking.getDoencas());
	    jsonApontamentoQualidadePacking.setAparenciaEngaco(apontamentoQualidadePacking.getAparenciaEngaco());
	    jsonApontamentoQualidadePacking.setDesgrana(apontamentoQualidadePacking.getDesgrana());
	    jsonApontamentoQualidadePacking.setPodridao(apontamentoQualidadePacking.getPodridao());
	    jsonApontamentoQualidadePacking.setCicatrizes(apontamentoQualidadePacking.getCicatrizes());
	    jsonApontamentoQualidadePacking.setRachaduras(apontamentoQualidadePacking.getRachaduras());
	    jsonApontamentoQualidadePacking.setRachadurasCampo(apontamentoQualidadePacking.getRachadurasCampo());
	    jsonApontamentoQualidadePacking.setAmolecimento(apontamentoQualidadePacking.getAmolecimento());
	    jsonApontamentoQualidadePacking.setObservacao(apontamentoQualidadePacking.getObservacao());
	    jsonApontamentoQualidadePacking.setDataHora(DateUtil.localDateTimeAsString(apontamentoQualidadePacking.getDataHora()));
		jsonApontamentoQualidadePacking.setBolsao(toJson(apontamentoQualidadePacking.getBolsao()));		
		jsonApontamentoQualidadePacking.setGenerador(toJson(apontamentoQualidadePacking.getGenerador()));		
		jsonApontamentoQualidadePacking.setCor(toJson(apontamentoQualidadePacking.getCor()));		
		jsonApontamentoQualidadePacking.setCargo(toJson(apontamentoQualidadePacking.getCargo()));		
		jsonApontamentoQualidadePacking.setVariedade(toJson(apontamentoQualidadePacking.getVariedade()));		
		jsonApontamentoQualidadePacking.setLatada(toJson(apontamentoQualidadePacking.getLatada()));		
		jsonApontamentoQualidadePacking.setEmbalagem(toJson(apontamentoQualidadePacking.getEmbalagem()));		
		jsonApontamentoQualidadePacking.setCabine(toJson(apontamentoQualidadePacking.getCabine()));		
		jsonApontamentoQualidadePacking.setSacola(toJson(apontamentoQualidadePacking.getSacola()));		
		jsonApontamentoQualidadePacking.setCliente(toJson(apontamentoQualidadePacking.getCliente()));		
		jsonApontamentoQualidadePacking.setPacking(toJson(apontamentoQualidadePacking.getPacking()));		
		return jsonApontamentoQualidadePacking;
	}

	public static ApontamentoQualidadePacking toEntity(JsonApontamentoQualidadePacking jsonApontamentoQualidadePacking) {
		ApontamentoQualidadePacking apontamentoQualidadePacking = new ApontamentoQualidadePacking();
		
		apontamentoQualidadePacking.setId(jsonApontamentoQualidadePacking.getId());
		apontamentoQualidadePacking.setAparencia(jsonApontamentoQualidadePacking.getAparencia());
		apontamentoQualidadePacking.setDiametroMinimo(jsonApontamentoQualidadePacking.getDiametroMinimo());
		apontamentoQualidadePacking.setDiametroMaximo(jsonApontamentoQualidadePacking.getDiametroMaximo());
		apontamentoQualidadePacking.setDiametroMedio(jsonApontamentoQualidadePacking.getDiametroMedio());
		apontamentoQualidadePacking.setBrixMinimo(jsonApontamentoQualidadePacking.getBrixMinimo());
		apontamentoQualidadePacking.setBrixMaximo(jsonApontamentoQualidadePacking.getBrixMaximo());
		apontamentoQualidadePacking.setBrixMedio(jsonApontamentoQualidadePacking.getBrixMedio());
		apontamentoQualidadePacking.setPesoCachoMinimo(jsonApontamentoQualidadePacking.getPesoCachoMinimo());
		apontamentoQualidadePacking.setPesoCachoMaximo(jsonApontamentoQualidadePacking.getPesoCachoMaximo());
		apontamentoQualidadePacking.setPesoSacolaMinimo(jsonApontamentoQualidadePacking.getPesoSacolaMinimo());
		apontamentoQualidadePacking.setPesoSacolaMaximo(jsonApontamentoQualidadePacking.getPesoSacolaMaximo());
		apontamentoQualidadePacking.setNumeroCachoSacola(jsonApontamentoQualidadePacking.getNumeroCachoSacola());
		apontamentoQualidadePacking.setNumeroSacola(jsonApontamentoQualidadePacking.getNumeroSacola());
		apontamentoQualidadePacking.setPesoCumbucaMinimo(jsonApontamentoQualidadePacking.getPesoCumbucaMinimo());
		apontamentoQualidadePacking.setPesoCumbucaMaximo(jsonApontamentoQualidadePacking.getPesoCumbucaMaximo());
		apontamentoQualidadePacking.setNumeroCachosCumbuca(jsonApontamentoQualidadePacking.getNumeroCachosCumbuca());
		apontamentoQualidadePacking.setNumeroCumbucas(jsonApontamentoQualidadePacking.getNumeroCumbucas());
		apontamentoQualidadePacking.setPesoBruto(jsonApontamentoQualidadePacking.getPesoBruto());
		apontamentoQualidadePacking.setPesoLiquido(jsonApontamentoQualidadePacking.getPesoLiquido());
		apontamentoQualidadePacking.setCorposEstranhos(jsonApontamentoQualidadePacking.getCorposEstranhos());
		apontamentoQualidadePacking.setBagasAquosas(jsonApontamentoQualidadePacking.getBagasAquosas());
		apontamentoQualidadePacking.setBagasCristalinas(jsonApontamentoQualidadePacking.getBagasCristalinas());
		apontamentoQualidadePacking.setFirmeza(jsonApontamentoQualidadePacking.getFirmeza());
		apontamentoQualidadePacking.setDanos(jsonApontamentoQualidadePacking.getDanos());
		apontamentoQualidadePacking.setPragas(jsonApontamentoQualidadePacking.getPragas());
		apontamentoQualidadePacking.setDoencas(jsonApontamentoQualidadePacking.getDoencas());
		apontamentoQualidadePacking.setAparenciaEngaco(jsonApontamentoQualidadePacking.getAparenciaEngaco());
		apontamentoQualidadePacking.setDesgrana(jsonApontamentoQualidadePacking.getDesgrana());
		apontamentoQualidadePacking.setPodridao(jsonApontamentoQualidadePacking.getPodridao());
		apontamentoQualidadePacking.setCicatrizes(jsonApontamentoQualidadePacking.getCicatrizes());
		apontamentoQualidadePacking.setRachaduras(jsonApontamentoQualidadePacking.getRachaduras());
		apontamentoQualidadePacking.setRachadurasCampo(jsonApontamentoQualidadePacking.getRachadurasCampo());
		apontamentoQualidadePacking.setAmolecimento(jsonApontamentoQualidadePacking.getAmolecimento());
		apontamentoQualidadePacking.setObservacao(jsonApontamentoQualidadePacking.getObservacao());
	    apontamentoQualidadePacking.setDataHora(DateUtil.stringAsLocalDateTime(jsonApontamentoQualidadePacking.getDataHora()));
		apontamentoQualidadePacking.setBolsao(toEntity(jsonApontamentoQualidadePacking.getBolsao()));					
		apontamentoQualidadePacking.setGenerador(toEntity(jsonApontamentoQualidadePacking.getGenerador()));					
		apontamentoQualidadePacking.setCor(toEntity(jsonApontamentoQualidadePacking.getCor()));					
		apontamentoQualidadePacking.setCargo(toEntity(jsonApontamentoQualidadePacking.getCargo()));					
		apontamentoQualidadePacking.setVariedade(toEntity(jsonApontamentoQualidadePacking.getVariedade()));					
		apontamentoQualidadePacking.setLatada(toEntity(jsonApontamentoQualidadePacking.getLatada()));					
		apontamentoQualidadePacking.setEmbalagem(toEntity(jsonApontamentoQualidadePacking.getEmbalagem()));					
		apontamentoQualidadePacking.setCabine(toEntity(jsonApontamentoQualidadePacking.getCabine()));					
		apontamentoQualidadePacking.setSacola(toEntity(jsonApontamentoQualidadePacking.getSacola()));					
		apontamentoQualidadePacking.setCliente(toEntity(jsonApontamentoQualidadePacking.getCliente()));					
		apontamentoQualidadePacking.setPacking(toEntity(jsonApontamentoQualidadePacking.getPacking()));					
		return apontamentoQualidadePacking;
	}		
	
	public static List<JsonApontamentoQualidadePacking> toListJsonApontamentoQualidadePackings(List<ApontamentoQualidadePacking> all) {
		List<JsonApontamentoQualidadePacking> jsonApontamentoQualidadePackings = new ArrayList<JsonApontamentoQualidadePacking>();
		for (ApontamentoQualidadePacking apontamentoQualidadePacking : all) {
			jsonApontamentoQualidadePackings.add(toJson(apontamentoQualidadePacking));
		}
		return jsonApontamentoQualidadePackings;
	}
	//converte de entidade para json
	public static JsonBolsao toJson(Bolsao bolsao) {
		JsonBolsao jsonBolsao = new JsonBolsao();
		
		jsonBolsao.setId(bolsao.getId());
	    jsonBolsao.setNome(bolsao.getNome());
		return jsonBolsao;
	}

	public static Bolsao toEntity(JsonBolsao jsonBolsao) {
		Bolsao bolsao = new Bolsao();
		
		bolsao.setId(jsonBolsao.getId());
		bolsao.setNome(jsonBolsao.getNome());
		return bolsao;
	}		
	
	public static List<JsonBolsao> toListJsonBolsaos(List<Bolsao> all) {
		List<JsonBolsao> jsonBolsaos = new ArrayList<JsonBolsao>();
		for (Bolsao bolsao : all) {
			jsonBolsaos.add(toJson(bolsao));
		}
		return jsonBolsaos;
	}
	//converte de entidade para json
	public static JsonCabine toJson(Cabine cabine) {
		JsonCabine jsonCabine = new JsonCabine();
		
		jsonCabine.setId(cabine.getId());
	    jsonCabine.setNome(cabine.getNome());
		jsonCabine.setPacking(toJson(cabine.getPacking()));		
		return jsonCabine;
	}

	public static Cabine toEntity(JsonCabine jsonCabine) {
		Cabine cabine = new Cabine();
		
		cabine.setId(jsonCabine.getId());
		cabine.setNome(jsonCabine.getNome());
		cabine.setPacking(toEntity(jsonCabine.getPacking()));					
		return cabine;
	}		
	
	public static List<JsonCabine> toListJsonCabines(List<Cabine> all) {
		List<JsonCabine> jsonCabines = new ArrayList<JsonCabine>();
		for (Cabine cabine : all) {
			jsonCabines.add(toJson(cabine));
		}
		return jsonCabines;
	}
	//converte de entidade para json
	public static JsonCargo toJson(Cargo cargo) {
		JsonCargo jsonCargo = new JsonCargo();
		
		jsonCargo.setId(cargo.getId());
	    jsonCargo.setNome(cargo.getNome());
		return jsonCargo;
	}

	public static Cargo toEntity(JsonCargo jsonCargo) {
		Cargo cargo = new Cargo();
		
		cargo.setId(jsonCargo.getId());
		cargo.setNome(jsonCargo.getNome());
		return cargo;
	}		
	
	public static List<JsonCargo> toListJsonCargos(List<Cargo> all) {
		List<JsonCargo> jsonCargos = new ArrayList<JsonCargo>();
		for (Cargo cargo : all) {
			jsonCargos.add(toJson(cargo));
		}
		return jsonCargos;
	}
	//converte de entidade para json
	public static JsonCbo toJson(Cbo cbo) {
		JsonCbo jsonCbo = new JsonCbo();
		
		jsonCbo.setId(cbo.getId());
	    jsonCbo.setCodigo(cbo.getCodigo());
	    jsonCbo.setNome(cbo.getNome());
		return jsonCbo;
	}

	public static Cbo toEntity(JsonCbo jsonCbo) {
		Cbo cbo = new Cbo();
		
		cbo.setId(jsonCbo.getId());
		cbo.setCodigo(jsonCbo.getCodigo());
		cbo.setNome(jsonCbo.getNome());
		return cbo;
	}		
	
	public static List<JsonCbo> toListJsonCbos(List<Cbo> all) {
		List<JsonCbo> jsonCbos = new ArrayList<JsonCbo>();
		for (Cbo cbo : all) {
			jsonCbos.add(toJson(cbo));
		}
		return jsonCbos;
	}
	//converte de entidade para json
	public static JsonClient toJson(Client client) {
		JsonClient jsonClient = new JsonClient();
		
		jsonClient.setId(client.getId());
		return jsonClient;
	}

	public static Client toEntity(JsonClient jsonClient) {
		Client client = new Client();
		
		client.setId(jsonClient.getId());
		return client;
	}		
	
	public static List<JsonClient> toListJsonClients(List<Client> all) {
		List<JsonClient> jsonClients = new ArrayList<JsonClient>();
		for (Client client : all) {
			jsonClients.add(toJson(client));
		}
		return jsonClients;
	}
	//converte de entidade para json
	public static JsonCliente toJson(Cliente cliente) {
		JsonCliente jsonCliente = new JsonCliente();
		
		jsonCliente.setId(cliente.getId());
	    jsonCliente.setNome(cliente.getNome());
	    jsonCliente.setNomeFantasia(cliente.getNomeFantasia());
	    jsonCliente.setNomeContato(cliente.getNomeContato());
	    jsonCliente.setTelefoneContato(cliente.getTelefoneContato());
	    jsonCliente.setRazaoSocial(cliente.getRazaoSocial());
	    jsonCliente.setObservacao(cliente.getObservacao());
	    jsonCliente.setCpf(cliente.getCpf());
	    jsonCliente.setCnpj(cliente.getCnpj());
	    jsonCliente.setEmail(cliente.getEmail());
	    jsonCliente.setEmail2(cliente.getEmail2());
	    jsonCliente.setPessoaFisica(cliente.getPessoaFisica());
		jsonCliente.setDataNascimento(DateUtil.localDateAsString(cliente.getDataNascimento()));
		return jsonCliente;
	}

	public static Cliente toEntity(JsonCliente jsonCliente) {
		Cliente cliente = new Cliente();
		
		cliente.setId(jsonCliente.getId());
		cliente.setNome(jsonCliente.getNome());
		cliente.setNomeFantasia(jsonCliente.getNomeFantasia());
		cliente.setNomeContato(jsonCliente.getNomeContato());
		cliente.setTelefoneContato(jsonCliente.getTelefoneContato());
		cliente.setRazaoSocial(jsonCliente.getRazaoSocial());
		cliente.setObservacao(jsonCliente.getObservacao());
		cliente.setCpf(jsonCliente.getCpf());
		cliente.setCnpj(jsonCliente.getCnpj());
		cliente.setEmail(jsonCliente.getEmail());
		cliente.setEmail2(jsonCliente.getEmail2());
		cliente.setPessoaFisica(jsonCliente.getPessoaFisica());
	    cliente.setDataNascimento(DateUtil.stringAsLocalDate(jsonCliente.getDataNascimento()));
		return cliente;
	}		
	
	public static List<JsonCliente> toListJsonClientes(List<Cliente> all) {
		List<JsonCliente> jsonClientes = new ArrayList<JsonCliente>();
		for (Cliente cliente : all) {
			jsonClientes.add(toJson(cliente));
		}
		return jsonClientes;
	}
	//converte de entidade para json
	public static JsonCor toJson(Cor cor) {
		JsonCor jsonCor = new JsonCor();
		
		jsonCor.setId(cor.getId());
	    jsonCor.setNome(cor.getNome());
		return jsonCor;
	}

	public static Cor toEntity(JsonCor jsonCor) {
		Cor cor = new Cor();
		
		cor.setId(jsonCor.getId());
		cor.setNome(jsonCor.getNome());
		return cor;
	}		
	
	public static List<JsonCor> toListJsonCors(List<Cor> all) {
		List<JsonCor> jsonCors = new ArrayList<JsonCor>();
		for (Cor cor : all) {
			jsonCors.add(toJson(cor));
		}
		return jsonCors;
	}
	//converte de entidade para json
	public static JsonDepartamento toJson(Departamento departamento) {
		JsonDepartamento jsonDepartamento = new JsonDepartamento();
		
		jsonDepartamento.setId(departamento.getId());
	    jsonDepartamento.setNome(departamento.getNome());
	    jsonDepartamento.setDescricao(departamento.getDescricao());
		return jsonDepartamento;
	}

	public static Departamento toEntity(JsonDepartamento jsonDepartamento) {
		Departamento departamento = new Departamento();
		
		departamento.setId(jsonDepartamento.getId());
		departamento.setNome(jsonDepartamento.getNome());
		departamento.setDescricao(jsonDepartamento.getDescricao());
		return departamento;
	}		
	
	public static List<JsonDepartamento> toListJsonDepartamentos(List<Departamento> all) {
		List<JsonDepartamento> jsonDepartamentos = new ArrayList<JsonDepartamento>();
		for (Departamento departamento : all) {
			jsonDepartamentos.add(toJson(departamento));
		}
		return jsonDepartamentos;
	}
	//converte de entidade para json
	public static JsonEmbalagem toJson(Embalagem embalagem) {
		JsonEmbalagem jsonEmbalagem = new JsonEmbalagem();
		
		jsonEmbalagem.setId(embalagem.getId());
	    jsonEmbalagem.setNome(embalagem.getNome());
		return jsonEmbalagem;
	}

	public static Embalagem toEntity(JsonEmbalagem jsonEmbalagem) {
		Embalagem embalagem = new Embalagem();
		
		embalagem.setId(jsonEmbalagem.getId());
		embalagem.setNome(jsonEmbalagem.getNome());
		return embalagem;
	}		
	
	public static List<JsonEmbalagem> toListJsonEmbalagems(List<Embalagem> all) {
		List<JsonEmbalagem> jsonEmbalagems = new ArrayList<JsonEmbalagem>();
		for (Embalagem embalagem : all) {
			jsonEmbalagems.add(toJson(embalagem));
		}
		return jsonEmbalagems;
	}
	//converte de entidade para json
	public static JsonFuncao toJson(Funcao funcao) {
		JsonFuncao jsonFuncao = new JsonFuncao();
		
		jsonFuncao.setId(funcao.getId());
	    jsonFuncao.setNome(funcao.getNome());
	    jsonFuncao.setDescricao(funcao.getDescricao());
		return jsonFuncao;
	}

	public static Funcao toEntity(JsonFuncao jsonFuncao) {
		Funcao funcao = new Funcao();
		
		funcao.setId(jsonFuncao.getId());
		funcao.setNome(jsonFuncao.getNome());
		funcao.setDescricao(jsonFuncao.getDescricao());
		return funcao;
	}		
	
	public static List<JsonFuncao> toListJsonFuncaos(List<Funcao> all) {
		List<JsonFuncao> jsonFuncaos = new ArrayList<JsonFuncao>();
		for (Funcao funcao : all) {
			jsonFuncaos.add(toJson(funcao));
		}
		return jsonFuncaos;
	}
	//converte de entidade para json
	public static JsonFuncionario toJson(Funcionario funcionario) {
		JsonFuncionario jsonFuncionario = new JsonFuncionario();
		
		jsonFuncionario.setId(funcionario.getId());
	    jsonFuncionario.setMatricula(funcionario.getMatricula());
	    jsonFuncionario.setFoto(funcionario.getFoto());
	    jsonFuncionario.setNome(funcionario.getNome());
	    jsonFuncionario.setTelefone(funcionario.getTelefone());
	    jsonFuncionario.setTelefone2(funcionario.getTelefone2());
	    jsonFuncionario.setSexo(funcionario.getSexo());
		jsonFuncionario.setDataNascimento(DateUtil.localDateAsString(funcionario.getDataNascimento()));
	    jsonFuncionario.setSalario(funcionario.getSalario());
	    jsonFuncionario.setEscolaridade(funcionario.getEscolaridade());
		jsonFuncionario.setDataAdmissao(DateUtil.localDateAsString(funcionario.getDataAdmissao()));
		jsonFuncionario.setDataDemissao(DateUtil.localDateAsString(funcionario.getDataDemissao()));
	    jsonFuncionario.setValorHoraExtra(funcionario.getValorHoraExtra());
	    jsonFuncionario.setCarteiraTrabalho(funcionario.getCarteiraTrabalho());
	    jsonFuncionario.setRg(funcionario.getRg());
	    jsonFuncionario.setRgOrgaoEmissor(funcionario.getRgOrgaoEmissor());
	    jsonFuncionario.setNomeBanco(funcionario.getNomeBanco());
	    jsonFuncionario.setBancoNumeroAgencia(funcionario.getBancoNumeroAgencia());
	    jsonFuncionario.setBancoNumeroConta(funcionario.getBancoNumeroConta());
	    jsonFuncionario.setPis(funcionario.getPis());
		jsonFuncionario.setCargo(toJson(funcionario.getCargo()));		
		jsonFuncionario.setCbo(toJson(funcionario.getCbo()));		
		jsonFuncionario.setDepartamento(toJson(funcionario.getDepartamento()));		
		jsonFuncionario.setFuncao(toJson(funcionario.getFuncao()));		
		return jsonFuncionario;
	}

	public static Funcionario toEntity(JsonFuncionario jsonFuncionario) {
		Funcionario funcionario = new Funcionario();
		
		funcionario.setId(jsonFuncionario.getId());
		funcionario.setMatricula(jsonFuncionario.getMatricula());
		funcionario.setFoto(jsonFuncionario.getFoto());
		funcionario.setNome(jsonFuncionario.getNome());
		funcionario.setTelefone(jsonFuncionario.getTelefone());
		funcionario.setTelefone2(jsonFuncionario.getTelefone2());
		funcionario.setSexo(jsonFuncionario.getSexo());
	    funcionario.setDataNascimento(DateUtil.stringAsLocalDate(jsonFuncionario.getDataNascimento()));
		funcionario.setSalario(jsonFuncionario.getSalario());
		funcionario.setEscolaridade(jsonFuncionario.getEscolaridade());
	    funcionario.setDataAdmissao(DateUtil.stringAsLocalDate(jsonFuncionario.getDataAdmissao()));
	    funcionario.setDataDemissao(DateUtil.stringAsLocalDate(jsonFuncionario.getDataDemissao()));
		funcionario.setValorHoraExtra(jsonFuncionario.getValorHoraExtra());
		funcionario.setCarteiraTrabalho(jsonFuncionario.getCarteiraTrabalho());
		funcionario.setRg(jsonFuncionario.getRg());
		funcionario.setRgOrgaoEmissor(jsonFuncionario.getRgOrgaoEmissor());
		funcionario.setNomeBanco(jsonFuncionario.getNomeBanco());
		funcionario.setBancoNumeroAgencia(jsonFuncionario.getBancoNumeroAgencia());
		funcionario.setBancoNumeroConta(jsonFuncionario.getBancoNumeroConta());
		funcionario.setPis(jsonFuncionario.getPis());
		funcionario.setCargo(toEntity(jsonFuncionario.getCargo()));					
		funcionario.setCbo(toEntity(jsonFuncionario.getCbo()));					
		funcionario.setDepartamento(toEntity(jsonFuncionario.getDepartamento()));					
		funcionario.setFuncao(toEntity(jsonFuncionario.getFuncao()));					
		return funcionario;
	}		
	
	public static List<JsonFuncionario> toListJsonFuncionarios(List<Funcionario> all) {
		List<JsonFuncionario> jsonFuncionarios = new ArrayList<JsonFuncionario>();
		for (Funcionario funcionario : all) {
			jsonFuncionarios.add(toJson(funcionario));
		}
		return jsonFuncionarios;
	}
	//converte de entidade para json
	public static JsonGenerador toJson(Generador generador) {
		JsonGenerador jsonGenerador = new JsonGenerador();
		
		jsonGenerador.setId(generador.getId());
	    jsonGenerador.setNome(generador.getNome());
		return jsonGenerador;
	}

	public static Generador toEntity(JsonGenerador jsonGenerador) {
		Generador generador = new Generador();
		
		generador.setId(jsonGenerador.getId());
		generador.setNome(jsonGenerador.getNome());
		return generador;
	}		
	
	public static List<JsonGenerador> toListJsonGeneradors(List<Generador> all) {
		List<JsonGenerador> jsonGeneradors = new ArrayList<JsonGenerador>();
		for (Generador generador : all) {
			jsonGeneradors.add(toJson(generador));
		}
		return jsonGeneradors;
	}
	//converte de entidade para json
	public static JsonLatada toJson(Latada latada) {
		JsonLatada jsonLatada = new JsonLatada();
		
		jsonLatada.setId(latada.getId());
	    jsonLatada.setNome(latada.getNome());
		jsonLatada.setClient(toJson(latada.getClient()));		
		return jsonLatada;
	}

	public static Latada toEntity(JsonLatada jsonLatada) {
		Latada latada = new Latada();
		
		latada.setId(jsonLatada.getId());
		latada.setNome(jsonLatada.getNome());
		latada.setClient(toEntity(jsonLatada.getClient()));					
		return latada;
	}		
	
	public static List<JsonLatada> toListJsonLatadas(List<Latada> all) {
		List<JsonLatada> jsonLatadas = new ArrayList<JsonLatada>();
		for (Latada latada : all) {
			jsonLatadas.add(toJson(latada));
		}
		return jsonLatadas;
	}
	//converte de entidade para json
	public static JsonPacking toJson(Packing packing) {
		JsonPacking jsonPacking = new JsonPacking();
		
		jsonPacking.setId(packing.getId());
		jsonPacking.setClient(toJson(packing.getClient()));		
		return jsonPacking;
	}

	public static Packing toEntity(JsonPacking jsonPacking) {
		Packing packing = new Packing();
		
		packing.setId(jsonPacking.getId());
		packing.setClient(toEntity(jsonPacking.getClient()));					
		return packing;
	}		
	
	public static List<JsonPacking> toListJsonPackings(List<Packing> all) {
		List<JsonPacking> jsonPackings = new ArrayList<JsonPacking>();
		for (Packing packing : all) {
			jsonPackings.add(toJson(packing));
		}
		return jsonPackings;
	}
	//converte de entidade para json
	public static JsonSacola toJson(Sacola sacola) {
		JsonSacola jsonSacola = new JsonSacola();
		
		jsonSacola.setId(sacola.getId());
	    jsonSacola.setNome(sacola.getNome());
		return jsonSacola;
	}

	public static Sacola toEntity(JsonSacola jsonSacola) {
		Sacola sacola = new Sacola();
		
		sacola.setId(jsonSacola.getId());
		sacola.setNome(jsonSacola.getNome());
		return sacola;
	}		
	
	public static List<JsonSacola> toListJsonSacolas(List<Sacola> all) {
		List<JsonSacola> jsonSacolas = new ArrayList<JsonSacola>();
		for (Sacola sacola : all) {
			jsonSacolas.add(toJson(sacola));
		}
		return jsonSacolas;
	}
	//converte de entidade para json
	public static JsonVariedade toJson(Variedade variedade) {
		JsonVariedade jsonVariedade = new JsonVariedade();
		
		jsonVariedade.setId(variedade.getId());
	    jsonVariedade.setNome(variedade.getNome());
		return jsonVariedade;
	}

	public static Variedade toEntity(JsonVariedade jsonVariedade) {
		Variedade variedade = new Variedade();
		
		variedade.setId(jsonVariedade.getId());
		variedade.setNome(jsonVariedade.getNome());
		return variedade;
	}		
	
	public static List<JsonVariedade> toListJsonVariedades(List<Variedade> all) {
		List<JsonVariedade> jsonVariedades = new ArrayList<JsonVariedade>();
		for (Variedade variedade : all) {
			jsonVariedades.add(toJson(variedade));
		}
		return jsonVariedades;
	}
	//converte de entidade para json
	public static JsonBairro toJson(Bairro bairro) {
		JsonBairro jsonBairro = new JsonBairro();
		
		jsonBairro.setId(bairro.getId());
	    jsonBairro.setNome(bairro.getNome());
		jsonBairro.setCidade(toJson(bairro.getCidade()));		
		jsonBairro.setEstado(toJson(bairro.getEstado()));		
		return jsonBairro;
	}

	public static Bairro toEntity(JsonBairro jsonBairro) {
		Bairro bairro = new Bairro();
		
		bairro.setId(jsonBairro.getId());
		bairro.setNome(jsonBairro.getNome());
		bairro.setCidade(toEntity(jsonBairro.getCidade()));					
		bairro.setEstado(toEntity(jsonBairro.getEstado()));					
		return bairro;
	}		
	
	public static List<JsonBairro> toListJsonBairros(List<Bairro> all) {
		List<JsonBairro> jsonBairros = new ArrayList<JsonBairro>();
		for (Bairro bairro : all) {
			jsonBairros.add(toJson(bairro));
		}
		return jsonBairros;
	}
	//converte de entidade para json
	public static JsonCep toJson(Cep cep) {
		JsonCep jsonCep = new JsonCep();
		
		jsonCep.setId(cep.getId());
	    jsonCep.setLogradouro(cep.getLogradouro());
	    jsonCep.setNumero(cep.getNumero());
		jsonCep.setBairro(toJson(cep.getBairro()));		
		jsonCep.setCidade(toJson(cep.getCidade()));		
		jsonCep.setEstado(toJson(cep.getEstado()));		
		return jsonCep;
	}

	public static Cep toEntity(JsonCep jsonCep) {
		Cep cep = new Cep();
		
		cep.setId(jsonCep.getId());
		cep.setLogradouro(jsonCep.getLogradouro());
		cep.setNumero(jsonCep.getNumero());
		cep.setBairro(toEntity(jsonCep.getBairro()));					
		cep.setCidade(toEntity(jsonCep.getCidade()));					
		cep.setEstado(toEntity(jsonCep.getEstado()));					
		return cep;
	}		
	
	public static List<JsonCep> toListJsonCeps(List<Cep> all) {
		List<JsonCep> jsonCeps = new ArrayList<JsonCep>();
		for (Cep cep : all) {
			jsonCeps.add(toJson(cep));
		}
		return jsonCeps;
	}
	//converte de entidade para json
	public static JsonCidade toJson(Cidade cidade) {
		JsonCidade jsonCidade = new JsonCidade();
		
		jsonCidade.setId(cidade.getId());
	    jsonCidade.setNome(cidade.getNome());
	    jsonCidade.setCep(cidade.getCep());
		jsonCidade.setEstado(toJson(cidade.getEstado()));		
		return jsonCidade;
	}

	public static Cidade toEntity(JsonCidade jsonCidade) {
		Cidade cidade = new Cidade();
		
		cidade.setId(jsonCidade.getId());
		cidade.setNome(jsonCidade.getNome());
		cidade.setCep(jsonCidade.getCep());
		cidade.setEstado(toEntity(jsonCidade.getEstado()));					
		return cidade;
	}		
	
	public static List<JsonCidade> toListJsonCidades(List<Cidade> all) {
		List<JsonCidade> jsonCidades = new ArrayList<JsonCidade>();
		for (Cidade cidade : all) {
			jsonCidades.add(toJson(cidade));
		}
		return jsonCidades;
	}
	//converte de entidade para json
	public static JsonEndereco toJson(Endereco endereco) {
		JsonEndereco jsonEndereco = new JsonEndereco();
		
		jsonEndereco.setId(endereco.getId());
	    jsonEndereco.setComplemento(endereco.getComplemento());
	    jsonEndereco.setNumero(endereco.getNumero());
		jsonEndereco.setCep(toJson(endereco.getCep()));		
		return jsonEndereco;
	}

	public static Endereco toEntity(JsonEndereco jsonEndereco) {
		Endereco endereco = new Endereco();
		
		endereco.setId(jsonEndereco.getId());
		endereco.setComplemento(jsonEndereco.getComplemento());
		endereco.setNumero(jsonEndereco.getNumero());
		endereco.setCep(toEntity(jsonEndereco.getCep()));					
		return endereco;
	}		
	
	public static List<JsonEndereco> toListJsonEnderecos(List<Endereco> all) {
		List<JsonEndereco> jsonEnderecos = new ArrayList<JsonEndereco>();
		for (Endereco endereco : all) {
			jsonEnderecos.add(toJson(endereco));
		}
		return jsonEnderecos;
	}
	//converte de entidade para json
	public static JsonEstado toJson(Estado estado) {
		JsonEstado jsonEstado = new JsonEstado();
		
		jsonEstado.setId(estado.getId());
	    jsonEstado.setNome(estado.getNome());
	    jsonEstado.setFaixaCep1Ini(estado.getFaixaCep1Ini());
	    jsonEstado.setFaixaCep1Fim(estado.getFaixaCep1Fim());
	    jsonEstado.setFaixaCep2Ini(estado.getFaixaCep2Ini());
	    jsonEstado.setFaixaCep2Fim(estado.getFaixaCep2Fim());
		return jsonEstado;
	}

	public static Estado toEntity(JsonEstado jsonEstado) {
		Estado estado = new Estado();
		
		estado.setId(jsonEstado.getId());
		estado.setNome(jsonEstado.getNome());
		estado.setFaixaCep1Ini(jsonEstado.getFaixaCep1Ini());
		estado.setFaixaCep1Fim(jsonEstado.getFaixaCep1Fim());
		estado.setFaixaCep2Ini(jsonEstado.getFaixaCep2Ini());
		estado.setFaixaCep2Fim(jsonEstado.getFaixaCep2Fim());
		return estado;
	}		
	
	public static List<JsonEstado> toListJsonEstados(List<Estado> all) {
		List<JsonEstado> jsonEstados = new ArrayList<JsonEstado>();
		for (Estado estado : all) {
			jsonEstados.add(toJson(estado));
		}
		return jsonEstados;
	}
	//converte de entidade para json
	public static JsonPais toJson(Pais pais) {
		JsonPais jsonPais = new JsonPais();
		
		jsonPais.setId(pais.getId());
	    jsonPais.setCodigo(pais.getCodigo());
	    jsonPais.setNome(pais.getNome());
		return jsonPais;
	}

	public static Pais toEntity(JsonPais jsonPais) {
		Pais pais = new Pais();
		
		pais.setId(jsonPais.getId());
		pais.setCodigo(jsonPais.getCodigo());
		pais.setNome(jsonPais.getNome());
		return pais;
	}		
	
	public static List<JsonPais> toListJsonPaiss(List<Pais> all) {
		List<JsonPais> jsonPaiss = new ArrayList<JsonPais>();
		for (Pais pais : all) {
			jsonPaiss.add(toJson(pais));
		}
		return jsonPaiss;
	}
	//converte de entidade para json
	public static JsonItem toJson(Item item) {
		JsonItem jsonItem = new JsonItem();
		
		jsonItem.setId(item.getId());
	    jsonItem.setName(item.getName());
	    jsonItem.setDescription(item.getDescription());
		jsonItem.setType(toJson(item.getType()));		
		return jsonItem;
	}

	public static Item toEntity(JsonItem jsonItem) {
		Item item = new Item();
		
		item.setId(jsonItem.getId());
		item.setName(jsonItem.getName());
		item.setDescription(jsonItem.getDescription());
		item.setType(toEntity(jsonItem.getType()));					
		return item;
	}		
	
	public static List<JsonItem> toListJsonItems(List<Item> all) {
		List<JsonItem> jsonItems = new ArrayList<JsonItem>();
		for (Item item : all) {
			jsonItems.add(toJson(item));
		}
		return jsonItems;
	}
	//converte de entidade para json
	public static JsonItemType toJson(ItemType itemType) {
		JsonItemType jsonItemType = new JsonItemType();
		
		jsonItemType.setId(itemType.getId());
	    jsonItemType.setName(itemType.getName());
	    jsonItemType.setDescription(itemType.getDescription());
		return jsonItemType;
	}

	public static ItemType toEntity(JsonItemType jsonItemType) {
		ItemType itemType = new ItemType();
		
		itemType.setId(jsonItemType.getId());
		itemType.setName(jsonItemType.getName());
		itemType.setDescription(jsonItemType.getDescription());
		return itemType;
	}		
	
	public static List<JsonItemType> toListJsonItemTypes(List<ItemType> all) {
		List<JsonItemType> jsonItemTypes = new ArrayList<JsonItemType>();
		for (ItemType itemType : all) {
			jsonItemTypes.add(toJson(itemType));
		}
		return jsonItemTypes;
	}
	//converte de entidade para json
	public static JsonOperation toJson(Operation operation) {
		JsonOperation jsonOperation = new JsonOperation();
		
		jsonOperation.setId(operation.getId());
	    jsonOperation.setName(operation.getName());
	    jsonOperation.setCanEdit(operation.getCanEdit());
	    jsonOperation.setCanRead(operation.getCanRead());
	    jsonOperation.setCanUpdate(operation.getCanUpdate());
	    jsonOperation.setCanDelete(operation.getCanDelete());
	    jsonOperation.setCanExecute(operation.getCanExecute());
		return jsonOperation;
	}

	public static Operation toEntity(JsonOperation jsonOperation) {
		Operation operation = new Operation();
		
		operation.setId(jsonOperation.getId());
		operation.setName(jsonOperation.getName());
		operation.setCanEdit(jsonOperation.getCanEdit());
		operation.setCanRead(jsonOperation.getCanRead());
		operation.setCanUpdate(jsonOperation.getCanUpdate());
		operation.setCanDelete(jsonOperation.getCanDelete());
		operation.setCanExecute(jsonOperation.getCanExecute());
		return operation;
	}		
	
	public static List<JsonOperation> toListJsonOperations(List<Operation> all) {
		List<JsonOperation> jsonOperations = new ArrayList<JsonOperation>();
		for (Operation operation : all) {
			jsonOperations.add(toJson(operation));
		}
		return jsonOperations;
	}
	//converte de entidade para json
	public static JsonPermission toJson(Permission permission) {
		JsonPermission jsonPermission = new JsonPermission();
		
		jsonPermission.setId(permission.getId());
	    jsonPermission.setName(permission.getName());
		jsonPermission.setOperation(toJson(permission.getOperation()));		
		jsonPermission.setItem(toJson(permission.getItem()));		
		return jsonPermission;
	}

	public static Permission toEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		
		permission.setId(jsonPermission.getId());
		permission.setName(jsonPermission.getName());
		permission.setOperation(toEntity(jsonPermission.getOperation()));					
		permission.setItem(toEntity(jsonPermission.getItem()));					
		return permission;
	}		
	
	public static List<JsonPermission> toListJsonPermissions(List<Permission> all) {
		List<JsonPermission> jsonPermissions = new ArrayList<JsonPermission>();
		for (Permission permission : all) {
			jsonPermissions.add(toJson(permission));
		}
		return jsonPermissions;
	}
	//converte de entidade para json
	public static JsonRole toJson(Role role) {
		JsonRole jsonRole = new JsonRole();
		
		jsonRole.setId(role.getId());
	    jsonRole.setAuthority(role.getAuthority());
	    jsonRole.setDescription(role.getDescription());
		return jsonRole;
	}

	public static Role toEntity(JsonRole jsonRole) {
		Role role = new Role();
		
		role.setId(jsonRole.getId());
		role.setAuthority(jsonRole.getAuthority());
		role.setDescription(jsonRole.getDescription());
		return role;
	}		
	
	public static List<JsonRole> toListJsonRoles(List<Role> all) {
		List<JsonRole> jsonRoles = new ArrayList<JsonRole>();
		for (Role role : all) {
			jsonRoles.add(toJson(role));
		}
		return jsonRoles;
	}
	//converte de entidade para json
	public static JsonSession toJson(Session session) {
		JsonSession jsonSession = new JsonSession();
		
		jsonSession.setId(session.getId());
	    jsonSession.setName(session.getName());
	    jsonSession.setCreationDate(DateUtil.localDateTimeAsString(session.getCreationDate()));
		jsonSession.setUser(toJson(session.getUser()));		
		return jsonSession;
	}

	public static Session toEntity(JsonSession jsonSession) {
		Session session = new Session();
		
		session.setId(jsonSession.getId());
		session.setName(jsonSession.getName());
	    session.setCreationDate(DateUtil.stringAsLocalDateTime(jsonSession.getCreationDate()));
		session.setUser(toEntity(jsonSession.getUser()));					
		return session;
	}		
	
	public static List<JsonSession> toListJsonSessions(List<Session> all) {
		List<JsonSession> jsonSessions = new ArrayList<JsonSession>();
		for (Session session : all) {
			jsonSessions.add(toJson(session));
		}
		return jsonSessions;
	}
	//converte de entidade para json
	public static JsonUser toJson(User user) {
		JsonUser jsonUser = new JsonUser();
		
		jsonUser.setId(user.getId());
	    jsonUser.setName(user.getName());
	    jsonUser.setUsername(user.getUsername());
	    jsonUser.setPassword(user.getPassword());
	    jsonUser.setEnable(user.getEnable());
	    jsonUser.setImage(user.getImage());
		jsonUser.setOwner(toJson(user.getOwner()));		
		return jsonUser;
	}

	public static User toEntity(JsonUser jsonUser) {
		User user = new User();
		
		user.setId(jsonUser.getId());
		user.setName(jsonUser.getName());
		user.setUsername(jsonUser.getUsername());
		user.setPassword(jsonUser.getPassword());
		user.setEnable(jsonUser.getEnable());
		user.setImage(jsonUser.getImage());
		user.setOwner(toEntity(jsonUser.getOwner()));					
		return user;
	}		
	
	public static List<JsonUser> toListJsonUsers(List<User> all) {
		List<JsonUser> jsonUsers = new ArrayList<JsonUser>();
		for (User user : all) {
			jsonUsers.add(toJson(user));
		}
		return jsonUsers;
	}

	
