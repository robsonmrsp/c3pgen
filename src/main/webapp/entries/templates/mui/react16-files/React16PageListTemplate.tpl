/* ${entity.name}Â´s Search Page generated by JSetup ${JSetupVersion} :  at ${.now}  */
import { useEffect, useState } from 'react';
import dayjs from 'dayjs';
import Router from 'next/router';
import { Box, Card, Stack, Table, TableContainer, Container, Typography, Button, CardContent, CardHeader, Divider, TextField } from '@mui/material';
import TableBody from "@mui/material/TableBody";
import TableHeader from "components/data-table/TableHeader";
import TablePagination from "components/data-table/TablePagination";
import { ActionCell } from '@/components/data-table/ActionCell';

import Scrollbar from "components/Scrollbar";
import BasicTableRow from "components/data-table/BasicTableRow";
import DashboardLayout from "components/layouts/admin";

import HttpRequest from '@/lib/HttpRequest'

const toFilterPartner = (values) => {
  return {
    ...values,
  }
}

const columns = [
  { field: 'id', headerName: 'ID', width: 90 },
<#list entity.attributes as att>
  {
    field: '${firstLower(att.name)}',
    headerName: '${att.displayName}',
    show: true,
  },
</#list>
];
const Page = () => {
  const service = new HttpRequest("/api/crud/${firstLower(entity.name)}s");
  const [pager, setPager] = useState({});
  const [paginationModel, setPaginationModel] = useState({ pageSize: 10, page: 1, sortModel: { orderBy: 'id', direction: 'desc' }, filter: {} })
  const [values, setValues] = useState({
<#list entity.attributes as att>
  <#if att.viewApproach?? >
	<#if att.type.className == 'Boolean' && att.viewApproach.type  == 'check'  >
    ${firstLower(att.name)}:false,
	<#elseif att.type.className == 'Date' && att.viewApproach.type  == 'datepicker' >
    ${firstLower(att.name)}: dayjs(),
	<#elseif att.viewApproach.type  == 'radiogroup'>
	<#elseif att.viewApproach.type  == 'combo'  >
	<#else>
    ${firstLower(att.name)}: '',
	</#if>
  </#if>
</#list>
  });

  const handleChange = (event) => {
    setValues({
      ...values,
      [event.target.name]: event.target.value
    });
  };

  useEffect(() => {
    const fetchData = async () => {
      const response = await service.getPage({
        page: paginationModel.page,
        pageSize: paginationModel.pageSize,
        orderBy: paginationModel.sortModel.orderBy,
        direction: paginationModel.sortModel.direction,
        ...paginationModel.filter
      });

      const jsonPager = await response.data;
      setPager(jsonPager)
    }
    fetchData()
      .catch(console.error);;
  }, [paginationModel])

  const searchByFilter = () => {
    const filter = toFilterPartner(values);
    console.log("PagePartner: searchByFilter", filter);
    setPaginationModel({ ...paginationModel, filter });
  }

  const onChangePagination = ({ pageSize, page }) => {
    console.log("PagePartner: onChangePagination", pageSize, page);
    setPaginationModel({ ...paginationModel, pageSize, page })
  }

  const onChangeSortModel = ({ orderBy, sortDirection }) => {
    console.log("PagePartner: onChangeSortModel", pageSize, page, orderBy, sortDirection);
    setPaginationModel({ ...paginationModel, sortModel: { orderBy, direction: sortDirection } })
  }

  return (
    <Box py={4}>
      <Card>
        <CardHeader
          title="Filtro de pesquisa"
        />
        <Divider />
        <CardContent>
    <#list entity.attributes as att>
      <#if att.viewApproach?? >
        <#if att.type.className == 'Boolean' && att.viewApproach.type  == 'check'  >
        <#elseif att.type.className == 'Date' && att.viewApproach.type  == 'datepicker' >
          <DatePicker
            inputFormat='DD/MM/YYYY'
            format="DD/MM/YYYY"
            label="${att.displayName}"
            openTo="day"
            views={['day', 'month', 'year']}
            value={values.${firstLower(att.name)}}
            name="${firstLower(att.name)}"
            onChange={(newValue) => {
              const newDate = dayjs(newValue)
              setValues({ ...values, ${firstLower(att.name)}: newDate })
            }}
            renderInput={(params) => <TextField {...params} />}
          />
        <#elseif att.viewApproach.type  == 'radiogroup'>
        <#elseif att.viewApproach.type  == 'combo'  >
        <#else>
          <TextField
            fullWidth
            label="${att.displayName}"
            margin="normal"
            name="${firstLower(att.name)}"
            onChange={handleChange}
            type="text"
            value={values.${firstLower(att.name)}}
            variant="outlined"
          />
        </#if>
      </#if>
    </#list>
        </CardContent>
        <Divider />
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'flex-start',
            p: 2
          }}
        >
          <Stack direction="row" spacing={2}>
            <Button
              color="primary"
              variant="contained"
              onClick={searchByFilter}
            >
              Pesquisar
            </Button>
            <Button
              color="secondary"
              variant="contained"
              onClick={() => Router.push('/${firstLower(entity.name)}/new').catch(console.error)}
            >
              Novo
            </Button>
          </Stack>
        </Box>
      </Card>
      <Box py={4}>
        <Card>
          <CardHeader
            title="Resultado"
          />
          <Scrollbar autoHide={true}>
            <TableContainer
              sx={{
                minWidth: 900,
              }}
            >
              <Table>
                <TableHeader
                  orderBy={paginationModel.sortModel.orderBy}
                  sortDirection={paginationModel.sortModel.direction}
                  heading={columns}
                  onChangeSort={onChangeSortModel}
                  showActionHeader
                />
                <TableBody>
                  {(pager.items || []).map((item) => (
                    <BasicTableRow columns={columns} item={item} key={item.id} actionCell={<ActionCell
                      onEdit={() => {
                        Router
                          .push('/${firstLower(entity.name)}/edit/' + item.id)
                          .catch(console.error);
                      }}
                      onDelete={() => {
                        console.log("Removendo o registro ", item);
                      }}
                    />} />
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Scrollbar>
          <TablePagination
            onChangePagination={onChangePagination}
            pager={pager}
          />
        </Card>
      </Box>
    </Box>
  );
};

Page.getLayout = function getLayout(page) {
  return <DashboardLayout>{page}</DashboardLayout>;
};

export default Page;


