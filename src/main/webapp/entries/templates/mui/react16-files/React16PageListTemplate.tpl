/* ${entity.name}´s Search Page generated by JSetup ${JSetupVersion} :  at ${.now}  */
import { useEffect, useState } from 'react';
import Head from 'next/head';
import dayjs from 'dayjs';
import Router from 'next/router';
import { Box,Stack, Container, Typography, Button, Card, CardContent, CardHeader, Divider, TextField } from '@mui/material';
import { DataGrid } from '@mui/x-data-grid'
import { DatePicker } from '@mui/x-date-pickers';

import { Layout } from '@/components/layout/layout';
import { ActionCell } from '@/components/grid/ActionCell';
import HttpRequest from '@/lib/HttpRequest'
const toFilter${firstUpper(entity.name)} = (values) => {
  return { 
    ...values,
<#list entity.attributes as att>
  <#if att.viewApproach?? >
	<#elseif att.type.className == 'Date' && att.viewApproach.type  == 'datepicker' >
    ${firstLower(att.name)}: dayjs(values.${firstLower(att.name)}).format('DD/MM/YYYY'),
  </#if>
</#list>              
  }
}

const columns = [
  { field: 'id', headerName: 'ID', width: 90 },
<#list entity.attributes as att>
  {
    field: '${firstLower(att.name)}',
    headerName: '${att.displayName}',
    width: 150,
    editable: false,
  },	
</#list>    
  {
    field: 'print',
    headerName: 'Ações',
    sortable: false,
    filterable: false,
    editable: false,
    width: 150,
    disableColumnMenu: false,
    renderCell: (cellValues) => <ActionCell
      {...cellValues}
      onEdit={(row) => {
        Router
          .push('/${firstLower(entity.name)}/edit/' + row.id)
          .catch(console.error);
      }}
      onDelete={(row) => {
        console.log("Removendo o registro ", row);
      }}
    />
  }
];


const Page = () => {
  const service = new HttpRequest("/rs/crud/${firstLower(entity.name)}s");

  const [pageSize, setPageSize] = useState(5);
  const [pageItems, setPageItems] = useState([]);

  const [page, setPage] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const [filter, setFilter] = useState({});
  const [sort, setSort] = useState({ field: 'id', sort: 'desc' });
  const [values, setValues] = useState({
<#list entity.attributes as att>
  <#if att.viewApproach?? >
	<#if att.type.className == 'Boolean' && att.viewApproach.type  == 'check'  >
    ${firstLower(att.name)}:false,
	<#elseif att.type.className == 'Date' && att.viewApproach.type  == 'datepicker' >
    ${firstLower(att.name)}: dayjs(),
	<#elseif att.viewApproach.type  == 'radiogroup'>
	<#elseif att.viewApproach.type  == 'combo'  >
	<#else>
    ${firstLower(att.name)}: '',	
	</#if>
  </#if>
</#list>              
  });

  const handleChange = (event) => {
    setValues({
      ...values,
      [event.target.name]: event.target.value
    });
  };

  useEffect(() => {
    const fetchData = async () => {
      const response = await service.getPage({ page, pageSize, orderBy: sort.field, direction: sort.sort, ...filter });

      const json = await response.data;
      setPageItems(json.items);
      setTotalItems(json.totalRecords);
    }
    fetchData()
      .catch(console.error);;
  }, [pageSize, page, sort, filter])

  // sortmodel é um array, pegar apenas o primeiro elemento
  const sortChange = (sortModels, detail) => {
    const [sortModel = {}] = sortModels;
    setSort(sortModel);
  }

  const pageChange = (newPageNumber, detail) => {
    console.log(newPageNumber)
    setPage(newPageNumber + 1);
  }

  const searchByFilter = () => {

    setFilter(toFilter${firstUpper(entity.name)}(values));
  }
  const pageSizeChange = (newPageSize, detail) => {
    console.log(newPageSize)
    setPageSize(newPageSize)
  }

  return <>
    <Head>
      <title>
        Listagem de ${firstUpper(entity.name)}s
      </title>
    </Head>
    <Card>
      <CardHeader
        title="Filtro de pesquisa"
      />
      <Divider />
      <CardContent>
<#list entity.attributes as att>
  <#if att.viewApproach?? >
	<#if att.type.className == 'Boolean' && att.viewApproach.type  == 'check'  >
	<#elseif att.type.className == 'Date' && att.viewApproach.type  == 'datepicker' >
        <DatePicker
          inputFormat='DD/MM/YYYY'
          format="DD/MM/YYYY"
          label="${att.displayName}"
          openTo="day"
          views={['day', 'month', 'year']}
          value={values.${firstLower(att.name)}}
          name="${firstLower(att.name)}"
          onChange={(newValue) => {
            const newDate = dayjs(newValue)
            setValues({ ...values, ${firstLower(att.name)}: newDate })
          }}
          renderInput={(params) => <TextField {...params} />}
        />
	<#elseif att.viewApproach.type  == 'radiogroup'>
	<#elseif att.viewApproach.type  == 'combo'  >
	<#else>
        <TextField
          fullWidth
          label="${att.displayName}"
          margin="normal"
          name="${firstLower(att.name)}"
          onChange={handleChange}
          type="text"
          value={values.${firstLower(att.name)}}
          variant="outlined"
        />
	</#if>
  </#if>
</#list>              
      </CardContent>
      <Divider />
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'flex-start',
          p: 2
        }}
      >
        <Stack direction="row" spacing={2}>
          <Button
            color="primary"
            variant="contained"
            onClick={searchByFilter}
          >
            Pesquisar
          </Button>
          <Button
            color="secondary"
            variant="contained"
            onClick={() => Router.push('/${firstLower(entity.name)}/new').catch(console.error)}
          >
            Novo
          </Button>
        </Stack>
      </Box>
    </Card>
    <Card>
      <CardHeader
        title="Listagem"
      />
      <Divider />
      <CardContent>
        <Box sx={{ pt: 3 }}>
          <Box sx={{ height: 400, width: '100%' }}>
            <DataGrid
              rows={pageItems}
              columns={columns}
              pageSize={pageSize}
              rowCount={totalItems}
              rowsPerPageOptions={[5, 10, 20]}
              onSortModelChange={sortChange}
              onPageChange={pageChange}
              onPageSizeChange={pageSizeChange}
              sortingMode='server'
              paginationMode='server'
            />
          </Box>
        </Box>
      </CardContent>
    </Card>
  </>
};

Page.getLayout = (page) => (
  <Layout>
    {page}
  </Layout>
);

export default Page;
