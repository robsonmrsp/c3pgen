/* Partner´s Form generated by JSetup v0.95 :  at 2 de jun de 2023 19:04:24 */  
import { useEffect, useState } from 'react';
import Head from 'next/head';
import dayjs from 'dayjs';
import Router from 'next/router';
import { TextField, CheckboxWithLabel } from 'formik-mui';
import { Formik, Form, Field } from 'formik';
import { DatePicker } from 'formik-mui-x-date-pickers';

import { Button, LinearProgress, Card, CardContent, CardHeader, Divider, Box, Stack } from '@mui/material';
import DashboardLayout from "components/layouts/admin";
import HttpRequest from '@/lib/HttpRequest'
import { useRouter } from 'next/router'

const initValues = {
  name: '',	
  fantasyName: '',	
  corporateName: '',	
  logo: '',	
  icon: '',	
  code: '',	
  phoneNumber: '',	
  email: '',	
  companyWebSite: '',	
  companyLinkedin: '',	
  segment: '',	
  address: '',	
  observation: '',	
  howKnewTheProduct: '',	
  url: '',	
  status: '',	
}

const toPartner = (values) => {
  return { 
    ...values,
  }
}

const Partner = () => {
  const service = new HttpRequest("/api/crud/partners");
  const router = useRouter()
  const [formValues, setFormValues] = useState(initValues);
  const { id } = router.query

  useEffect(() => {
    if (!id) return;
    const fetchData = async () => {
      try {
        const response = await service.getById(id);
        const json = await response.data;
        setFormValues(json)
      } catch (err) {
        console.error(err)
      }
    }
    fetchData().catch(console.error);
  }, []);

  const save = async (formValues) => {
    const response = await service.save(toPartner(formValues));
    const json = await response.data;
    console.log(json)
  }

  const formValidate = (values) => {
    const errors = {};
  /*
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
    if (!values.Partner) {errors.title = 'Invalid!';}	
  */
    return errors;
  }

  return (
    <Box py={4}>
        <Head>
          <title>
            Cadastro de Parceiro
          </title>
        </Head>
        <Card>
          <CardHeader
            title="Novo Parceiro"
          />

          <Divider />
          <CardContent>
            <Formik
              enableReinitialize={true}
              initialValues={formValues}
              validate={formValidate}

              onSubmit={(values, { setSubmitting }) => {
                save(values);
                setSubmitting(false);
              }}
            >
              {({ submitForm, isSubmitting }) => (
                <Form>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="name"
                      type="text"
                      label="Nome"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="fantasyName"
                      type="text"
                      label="Nome Fantasia"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="corporateName"
                      type="text"
                      label="Razão social"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="logo"
                      type="text"
                      label="Logotipo"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="icon"
                      type="text"
                      label="Icone"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="code"
                      type="text"
                      label="Código"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="phoneNumber"
                      type="text"
                      label="Telefone de contato"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="email"
                      type="text"
                      label="Email"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="companyWebSite"
                      type="text"
                      label="Site da empresa"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="companyLinkedin"
                      type="text"
                      label="Endereço da empresa no Linkedin"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="segment"
                      type="text"
                      label="Segmento de atuação"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="address"
                      type="text"
                      label="Endereço simples"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="observation"
                      type="text"
                      label="Observation"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="howKnewTheProduct"
                      type="text"
                      label="How knew the product"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="url"
                      type="text"
                      label="Url"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  <Box marginTop={2}>
                    <Field
                      component={TextField}
                      name="status"
                      type="text"
                      label="Status"
                      variant="outlined"
                      fullWidth
                    />
                  </Box>
                  {isSubmitting && <LinearProgress />}
                  <Divider />
                  <Box marginTop={2}>
                    <Stack direction="row" spacing={2}>
                      <Button
                        variant="contained"
                        color="primary"
                        disabled={isSubmitting}
                        onClick={submitForm}
                      >
                        Salvar
                      </Button>
                      <Button
                        variant="text"
                        color="secondary"
                        disabled={isSubmitting}
                        onClick={() => Router.push('/partner/list').catch(console.error)}
                      >
                        Ver listagem
                      </Button>
                    </Stack>
                  </Box>
                </Form>
              )}
            </Formik>
          </CardContent>
          <Divider />
        </Card>
    </Box>
  );
};

Partner.getLayout = (partner) => {
  return <DashboardLayout>  {partner} </DashboardLayout>;
};

export default Partner;