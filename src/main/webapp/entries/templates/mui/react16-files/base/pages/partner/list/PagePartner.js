/* Partner´s Search Page generated by JSetup v0.95 :  at 2 de jun de 2023 19:04:24  */
import { useEffect, useState } from 'react';
import dayjs from 'dayjs';
import Router from 'next/router';
import { Box, Card, Stack, Table, TableContainer, Container, Typography, Button, CardContent, CardHeader, Divider, TextField } from '@mui/material';
import TableBody from "@mui/material/TableBody";
import TableHeader from "components/data-table/TableHeader";
import TablePagination from "components/data-table/TablePagination";
import { ActionCell } from '@/components/data-table/ActionCell';

import Scrollbar from "components/Scrollbar";
import BasicTableRow from "components/data-table/BasicTableRow";
import DashboardLayout from "components/layouts/admin";

import HttpRequest from '@/lib/HttpRequest'

const toFilterPartner = (values) => {
  return {
    ...values,
  }
}

const columns = [
  { field: 'id', headerName: 'ID', width: 90 },
  {
    field: 'name',
    headerName: 'Nome',
    width: 150,
  },
  {
    field: 'fantasyName',
    headerName: 'Nome Fantasia',
    width: 150,
  },
  {
    field: 'corporateName',
    headerName: 'Razão social',
    width: 150,
    editable: false,
  },
  {
    field: 'logo',
    headerName: 'Logotipo',
    width: 150,
    show: false,
  },
  {
    field: 'icon',
    headerName: 'Icone',
    width: 150,
  },
  {
    field: 'code',
    headerName: 'Código',
    width: 150,
  },
  {
    field: 'phoneNumber',
    headerName: 'Telefone de contato',
    width: 150,
  },
  {
    field: 'email',
    headerName: 'Email',
    width: 150,
    show: false,
  },
  {
    field: 'companyWebSite',
    headerName: 'Site da empresa',
    width: 150,
    show: false,
  },
  {
    field: 'companyLinkedin',
    headerName: 'Endereço da empresa no Linkedin',
    width: 150,
    show: false,
  },
  {
    field: 'segment',
    headerName: 'Segmento de atuação',
    width: 150,
    show: false,
  },
  {
    field: 'address',
    headerName: 'Endereço simples',
    width: 150,
    show: false,
  },
  {
    field: 'observation',
    headerName: 'Observation',
    width: 150,
    show: false,
  },
  {
    field: 'howKnewTheProduct',
    headerName: 'How knew the product',
    width: 150,
    show: false,
  },
  {
    field: 'url',
    headerName: 'Url',
    width: 150,
    show: false,
  },
  {
    field: 'status',
    headerName: 'Status',
    width: 150,
    show: false,
  },
];


const Page = () => {
  const service = new HttpRequest("/api/crud/partners");
  const [pager, setPager] = useState({});
  const [paginationModel, setPaginationModel] = useState({ pageSize: 10, page: 1, sortModel: { orderBy: 'id', direction: 'desc' }, filter: {} })
  const [values, setValues] = useState({
    name: '',
    fantasyName: '',
    corporateName: '',
    logo: '',
    icon: '',
    code: '',
    phoneNumber: '',
    email: '',
    companyWebSite: '',
    companyLinkedin: '',
    segment: '',
    address: '',
    observation: '',
    howKnewTheProduct: '',
    url: '',
    status: '',
  });

  const handleChange = (event) => {
    setValues({
      ...values,
      [event.target.name]: event.target.value
    });
  };

  useEffect(() => {
    const fetchData = async () => {
      const response = await service.getPage({
        page: paginationModel.page,
        pageSize: paginationModel.pageSize,
        orderBy: paginationModel.sortModel.orderBy,
        direction: paginationModel.sortModel.direction,
        ...paginationModel.filter
      });

      const jsonPager = await response.data;
      setPager(jsonPager)
    }
    fetchData()
      .catch(console.error);;
  }, [paginationModel])

  // sortmodel é um array, pegar apenas o primeiro elemento
  const searchByFilter = () => {
    const filter = toFilterPartner(values);
    console.log("PagePartner: searchByFilter", filter);
    setPaginationModel({ ...paginationModel, filter });
  }

  const onChangePagination = ({ pageSize, page }) => {
    console.log("PagePartner: onChangePagination", pageSize, page);
    setPaginationModel({ ...paginationModel, pageSize, page })
  }

  const onChangeSortModel = ({ orderBy, sortDirection }) => {
    console.log("PagePartner: onChangeSortModel", pageSize, page, orderBy, sortDirection);
    setPaginationModel({ ...paginationModel, sortModel: { orderBy, direction: sortDirection } })
  }

  return (
    <Box py={4}>
      <Card>
        <CardHeader
          title="Filtro de pesquisa"
        />
        <Divider />
        <CardContent>
          <TextField
            fullWidth
            label="Nome"
            margin="normal"
            name="name"
            onChange={handleChange}
            type="text"
            value={values.name}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Nome Fantasia"
            margin="normal"
            name="fantasyName"
            onChange={handleChange}
            type="text"
            value={values.fantasyName}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Razão social"
            margin="normal"
            name="corporateName"
            onChange={handleChange}
            type="text"
            value={values.corporateName}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Logotipo"
            margin="normal"
            name="logo"
            onChange={handleChange}
            type="text"
            value={values.logo}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Icone"
            margin="normal"
            name="icon"
            onChange={handleChange}
            type="text"
            value={values.icon}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Código"
            margin="normal"
            name="code"
            onChange={handleChange}
            type="text"
            value={values.code}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Telefone de contato"
            margin="normal"
            name="phoneNumber"
            onChange={handleChange}
            type="text"
            value={values.phoneNumber}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Email"
            margin="normal"
            name="email"
            onChange={handleChange}
            type="text"
            value={values.email}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Site da empresa"
            margin="normal"
            name="companyWebSite"
            onChange={handleChange}
            type="text"
            value={values.companyWebSite}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Endereço da empresa no Linkedin"
            margin="normal"
            name="companyLinkedin"
            onChange={handleChange}
            type="text"
            value={values.companyLinkedin}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Segmento de atuação"
            margin="normal"
            name="segment"
            onChange={handleChange}
            type="text"
            value={values.segment}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Endereço simples"
            margin="normal"
            name="address"
            onChange={handleChange}
            type="text"
            value={values.address}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Observation"
            margin="normal"
            name="observation"
            onChange={handleChange}
            type="text"
            value={values.observation}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="How knew the product"
            margin="normal"
            name="howKnewTheProduct"
            onChange={handleChange}
            type="text"
            value={values.howKnewTheProduct}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Url"
            margin="normal"
            name="url"
            onChange={handleChange}
            type="text"
            value={values.url}
            variant="outlined"
          />
          <TextField
            fullWidth
            label="Status"
            margin="normal"
            name="status"
            onChange={handleChange}
            type="text"
            value={values.status}
            variant="outlined"
          />
        </CardContent>
        <Divider />
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'flex-start',
            p: 2
          }}
        >
          <Stack direction="row" spacing={2}>
            <Button
              color="primary"
              variant="contained"
              onClick={searchByFilter}
            >
              Pesquisar
            </Button>
            <Button
              color="secondary"
              variant="contained"
              onClick={() => Router.push('/partner/new').catch(console.error)}
            >
              Novo
            </Button>
          </Stack>
        </Box>
      </Card>
      <Box py={4}>
        <Card>
          <CardHeader
            title="Resultado"
          />
          <Scrollbar autoHide={true}>
            <TableContainer
              sx={{
                minWidth: 900,
              }}
            >
              <Table>
                <TableHeader
                  orderBy={paginationModel.sortModel.orderBy}
                  sortDirection={paginationModel.sortModel.direction}
                  heading={columns}
                  onChangeSort={onChangeSortModel}
                  showActionHeader
                />
                <TableBody>
                  {(pager.items || []).map((item) => (
                    <BasicTableRow columns={columns} item={item} key={item.id} actionCell={<ActionCell
                      onEdit={() => {
                        Router
                          .push('/partner/edit/' + item.id)
                          .catch(console.error);
                      }}
                      onDelete={() => {
                        console.log("Removendo o registro ", item);
                      }}
                    />} />
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Scrollbar>
          <TablePagination
            onChangePagination={onChangePagination}
            pager={pager}
          />
        </Card>
      </Box>
    </Box>
  );
};

Page.getLayout = function getLayout(page) {
  return <DashboardLayout>{page}</DashboardLayout>;
};

export default Page;
