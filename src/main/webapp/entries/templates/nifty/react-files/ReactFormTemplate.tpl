/* ${entity.name}´s Form generated by JSetup ${JSetupVersion} :  at ${.now} */  
import React, { Component } from "react";
import { FormGroup, ControlLabel, FormControl, HelpBlock } from "react-bootstrap";

import HttpRequest from "../core/HttpRequest";
import JSInputField from "../core/JSInputField";
import JSCombobox from "../core/JSCombobox";
<#if entity.relationships??>	
	<#list entity.relationships as rel >
		<#if rel.viewApproach.type == 'modal'>
import Modal${firstUpper(rel.model)} from "../${firstLower(rel.model)}/Modal${firstUpper(rel.model)}";
		</#if>
		<#if rel.viewApproach.type == 'multiselectmodal'>
		</#if>		
	</#list>
</#if>

import { isEmpty, isNotEmpty } from "../core/JSUtils";

export default class Form${firstUpper(entity.name)} extends React.Component {
    constructor() {
        super();
        this.service = new HttpRequest("/rs/crud/${firstLower(entity.name)}s");
<#if entity.relationships??>	
	<#list entity.relationships as rel >
		<#if rel.viewApproach.type == 'combo'>
        this.service${firstUpper(rel.model)} = new HttpRequest("/rs/crud/${firstLower(rel.model)}s");
		</#if>		
	</#list>
</#if>
        
        this.state = {
            ${firstLower(entity.name)}: {
				id: '',
			<#list entity.attributes as att>
				${firstLower(att.name)}: '',    	
			</#list>
            },
		<#if entity.relationships??>	
			<#list entity.relationships as rel >
				<#if rel.viewApproach.type == 'combo'>
			${firstLower(rel.name)}List: [],
				</#if>		
			</#list>
		</#if>

            validationFields: {
            <#list entity.attributes as att>
            <#if att.required == true>
                ${firstLower(att.name)}: {
                    isValid: () => {
                        return isNotEmpty(this.state.${firstLower(entity.name)}.${firstLower(att.name)});
                    },
                    message: "Campo Obrigatório!",
                },
            </#if>
			</#list>
            }
        }
    }
    componentDidMount = () => {
<#if entity.relationships??>	
	<#list entity.relationships as rel >
		<#if rel.viewApproach.type == 'combo'>
        this.service${firstUpper(rel.model)}.getAll(
            ${firstLower(rel.name)}List => {
                this.setState({ ${firstLower(rel.name)}List  });
            },
            error => {
                console.error("error fetching forr combobox", error);
            }
        );
		</#if>		
	</#list>
</#if>
    
    }
    getValidationState = (fieldName) => {
        if (this.state.validationFields[fieldName]) {
            if (!(this.state.validationFields[fieldName].isValid())) {
                return "error";
            }
        }
        return null;
    }
    submitFormHandle = (clickEvent) => {
        console.log("Salvando o objeto: " + this.state.${firstLower(entity.name)});
        this.service.save(
            this.state.${firstLower(entity.name)},
            data => {
                this.${firstLower(entity.name)} = data;
            },
            error => {
                console.error("error saving ${firstLower(entity.name)} ", error);
            }
        );
    }

    changeFormDateHandle = (name, value) => {
    	const ${firstLower(entity.name)} = { ...this.state.${firstLower(entity.name)} };
        ${firstLower(entity.name)}[name] = value;
        this.setState({ ${firstLower(entity.name)} });
    }

    render = () => {
        return (
            <div className="panel">
                <div className="panel-heading">
                    <h3 className="panel-title">Cadastro de ${firstUpper(entity.displayName)}</h3>
                </div>
                <div className="panel-body">
                    <div className="panel">
                        <div className="panel-body">
                            <form>
                            <#list entity.attributes as att>
                            
                                <FormGroup controlId="${firstLower(att.name)}" validationState={this.getValidationState("${firstLower(att.name)}")} >
                                    <ControlLabel>${firstUpper(att.displayName)}</ControlLabel>
								<#if att.plugin??>
                                    <JSInputField name="${firstLower(att.name)}" plugin="${firstLower(att.plugin)}" type="text" value={this.state.${firstLower(entity.name)}.${firstLower(att.name)}}  onChange={(${firstLower(att.name)}) => this.changeFormDateHandle("${firstLower(att.name)}", ${firstLower(att.name)})} className="form-control" />
                                <#else>    
                                    <JSInputField name="${firstLower(att.name)}" type="text" value={this.state.${firstLower(entity.name)}.${firstLower(att.name)}}  onChange={(${firstLower(att.name)}) => this.changeFormDateHandle("${firstLower(att.name)}", ${firstLower(att.name)})} className="form-control" />
								</#if>                                    
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.state.validationFields.${firstLower(att.name)}.isValid() ? "hide" : "block"} >{this.state.validationFields.${firstLower(att.name)}.message}</HelpBlock>
                                </FormGroup>
                            </#list>
				<#list entity.relationships as rel>
					<#if (rel.type == 'OneToMany' || rel.type == 'ManyToMany' ) && rel.viewApproach.type == 'multiselectmodal'>
					</#if>
					<#if (rel.type == 'OneToMany' || rel.type == 'ManyToMany' ) && rel.viewApproach.type == 'multiselect'>
					<#elseif rel.type == 'ManyToOne'>
						<#if rel.viewApproach?? >
							<#if rel.viewApproach.type  == 'combo'  >
							
		                        <FormGroup controlId="titulo" validationState={this.getValidationState("${firstLower(rel.name)}")} >
		                            <ControlLabel>${firstUpper(rel.displayName)}</ControlLabel>
		                            <FormControl.Feedback />
		                            <JSCombobox value={this.state.${firstLower(entity.name)}.${firstLower(rel.name)}} values={this.state.${firstLower(rel.name)}List} displayValue="${(rel.viewApproach.comboVal)!'name'}" idValue="${(rel.viewApproach.comboId)!'id'}" onChange={(${firstLower(rel.name)}) => this.changeFormDateHandle("${firstLower(rel.name)}", ${firstLower(rel.name)})} className="form-control" />
		                            <HelpBlock className={this.state.validationFields.${firstLower(rel.name)}.isValid() ? "hide" : "block"} >{this.state.validationFields.${firstLower(rel.name)}.message}</HelpBlock>
		                        </FormGroup>      					
							<#elseif rel.viewApproach.type  == 'modal'  >
							
		                        <FormGroup controlId="titulo" validationState={this.getValidationState("${firstLower(rel.name)}")} >
		                            <ControlLabel>${firstUpper(rel.displayName)}</ControlLabel>
		                            <FormControl.Feedback />
									<Modal${firstUpper(rel.model)} value={this.state.${firstLower(entity.name)}.${firstLower(rel.name)}} displayValue="${(rel.viewApproach.textField)!'name'}" idValue="${(rel.viewApproach.hiddenField)!'id'}" onChange={(${firstLower(rel.name)}) => this.changeFormDateHandle("${firstLower(rel.name)}", ${firstLower(rel.name)})}  />
		                            <HelpBlock className={this.state.validationFields.${firstLower(rel.name)}.isValid() ? "hide" : "block"} >{this.state.validationFields.${firstLower(rel.name)}.message}</HelpBlock>
		                        </FormGroup>      					
							</#if>
						</#if>
					</#if>
                 </#list>
                            </form>
                        </div>
                    </div >
                    <div >
                        <div className="clearfix form-actions">
                            <button onClick={this.submitFormHandle} className="btn btn-primary btn-lg " >
                                <i className="fa fa-check " />
                                &nbsp; Salvar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn btn-primary btn-lg ">
                                <i className="fa fa-check " />
                                &nbsp; Salvar e continuar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn-lg btn btn-light" >
                                <i className=" fa fa-undo " />
                                &nbsp; Voltar para a listagem
                            </button>
                        </div >
                    </div >
                </div >
            </div >
        )
    }
}

