/* generated by JSetup ${JSetupVersion} :  at ${.now} */
package ${application.rootPackage}.service;

import ${application.rootPackage}.core.model.Tenant;
import ${application.rootPackage}.core.persistence.pagination.Pager;
import ${application.rootPackage}.core.persistence.pagination.SearchParameters;
import ${application.rootPackage}.model.${entity.name};
import ${application.rootPackage}.model.filter.Filter${entity.name};
import ${application.rootPackage}.persistence.${entity.name}Repository;
import ${application.rootPackage}.persistence.${entity.name}SpecificationHelper;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@AllArgsConstructor
@Service
@Transactional
public class ${entity.name}ServiceImp implements ${entity.name}Service {

	public static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}ServiceImp.class);
	
	${entity.name}Repository ${firstLower(entity.name)}Repository;
	
<#if application.multitenancy && entity.multitenancy>
	public Optional<${entity.name}> get(Integer id, Tenant tenant) {
		return ${firstLower(entity.name)}Repository.findOne(${entity.name}SpecificationHelper.fromId(id, tenant));
	}

	public Pager<${entity.name}> get(SearchParameters<Filter${entity.name}> searchParams, Tenant tenant) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<${entity.name}> page = ${firstLower(entity.name)}Repository.findAll(${entity.name}SpecificationHelper.filter(searchParams, tenant), pageRequest);

		return new Pager<>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}

	public Boolean delete(Integer id, Tenant tenant) {
		Optional<${entity.name}> optional = this.get(id, tenant);

		optional.ifPresent(${firstLower(entity.name)} -> ${firstLower(entity.name)}Repository.delete(${firstLower(entity.name)}));
		return true;
	}
<#else>
	public Optional<${entity.name}> get(Integer id) {
		return ${firstLower(entity.name)}Repository.findById(id);
	}

	public Pager<${entity.name}> get(SearchParameters<Filter${entity.name}> searchParams) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<${entity.name}> page = ${firstLower(entity.name)}Repository.findAll(${entity.name}SpecificationHelper.filter(searchParams), pageRequest);

		return new Pager<${entity.name}>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}
	
	public Boolean delete(Integer id) {
		Optional<${entity.name}> optional = this.get(id);
		if (optional.isPresent()) {
			${firstLower(entity.name)}Repository.delete(optional.get());
		}
		return true;
	}
</#if>

	public ${entity.name} save(${entity.name} entity) {
		return ${firstLower(entity.name)}Repository.save(entity);
	}

	public ${entity.name} update(${entity.name} entity) {
		return ${firstLower(entity.name)}Repository.save(entity);
	}
}

//generated by JSetup ${JSetupVersion} :  at ${.now}