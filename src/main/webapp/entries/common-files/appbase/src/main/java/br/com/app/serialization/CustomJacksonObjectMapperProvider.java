package ${application.corePackage}.serialization;

import javax.ws.rs.ext.ContextResolver;

import javax.ws.rs.ext.Provider;

import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;

/* generated by JSetup ${JSetupVersion} :  at ${.now} */
@Provider
public class CustomJacksonObjectMapperProvider implements ContextResolver<ObjectMapper> {

	final ObjectMapper defaultObjectMapper;

	public CustomJacksonObjectMapperProvider() {
		defaultObjectMapper = createDefaultMapper();
	}

	@Override
	public ObjectMapper getContext(Class<?> type) {
		return (defaultObjectMapper);
	}

	private static ObjectMapper createDefaultMapper() {
		ObjectMapper mapper = new ObjectMapper();

		SimpleModule testModule = new SimpleModule("${application.appName}", new Version(1, 0, 0, null));
		
		//testModule.addSerializer(Double.class, new CustomDoubleSerializer());
		testModule.addDeserializer(Double.class, new CustomDoubleDeserializer());
		
		testModule.addSerializer(LocalDate.class, new CustomLocalDateSerializer());
		testModule.addDeserializer(LocalDate.class, new CustomLocalDateDeserializer());
		
		testModule.addSerializer(LocalDateTime.class, new CustomLocalDateTimeSerializer());
		testModule.addDeserializer(LocalDateTime.class, new CustomLocalDateTimeDeserializer());
		
		
		mapper.registerModule(testModule);

		mapper.setSerializationInclusion(Include.NON_NULL);
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		mapper.setAnnotationIntrospector(AnnotationIntrospector.pair(new JacksonAnnotationIntrospector(), new JaxbAnnotationIntrospector(mapper.getTypeFactory())));

		return (mapper);
	}
}