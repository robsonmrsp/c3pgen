package ${application.corePackage}.security;

import java.util.Collection;


import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;

import ${application.rootPackage}.model.User;
import ${application.rootPackage}.persistence.DaoUser;

/**
*  generated by JSetup ${JSetupVersion} :  at ${.now}
**/
@Named
@Transactional(readOnly = true, propagation = Propagation.REQUIRES_NEW)
public class UserDetailsServiceImp implements UserDetailsService {
	private final DaoUser userDao;


	@Inject
	SpringSecurityUserContext context;

	@Inject
	public UserDetailsServiceImp(UserRepository userRepository) {
		if (userRepository == null) {
			throw new IllegalArgumentException("userRepository cannot be null");
		}
		this.userRepository = userRepository;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User appUser = userRepository.findByUsername(username);
		if (appUser == null) {
			throw new UsernameNotFoundException("Invalid username...");
		}
		return appUser;
	}
}