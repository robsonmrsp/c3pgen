/**generated by JSetup ${JSetupVersion} :  at ${.now}**/
package ${application.corePackage}.security;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import ${application.rootPackage}.model.User;
import ${application.rootPackage}.persistence.UserRepository;

@Service
@Transactional(readOnly = true, propagation = Propagation.REQUIRES_NEW)
public class UserDetailsServiceImp implements UserDetailsService {
	private final UserRepository userRepository;

	@Autowired
	SpringSecurityUserContext context;

	@Autowired
	public UserDetailsServiceImp(UserRepository userRepository) {
		if (userRepository == null) {
			throw new IllegalArgumentException("userRepository cannot be null");
		}
		this.userRepository = userRepository;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Optional<User> appUser = userRepository.findByUsername(username);
		if (appUser.isPresent()) {
			return appUser.get();
		}
		throw new UsernameNotFoundException("Invalid username...");
	}
}