package ${package}.service;

import java.util.List;
import java.time.LocalDateTime;
import java.time.LocalDate;
<#if entity.hasOwner?? && entity.hasOwner>
import ${application.corePackage}.model.CustomerOwner;
</#if>
import ${application.rootPackage}.model.${entity.name};
import ${application.rootPackage}.model.filter.Filter${entity.name};

import ${application.corePackage}.persistence.pagination.Pager;
import ${application.corePackage}.persistence.pagination.PaginationParams;
/* generated by JSetup ${JSetupVersion} :  at ${.now} */

public interface ${entity.name}Service {

	${entity.name} get(Integer id);


	List<${entity.name}> all();
	
	Pager<${entity.name}> all(PaginationParams paginationParams);

	List<${entity.name}> filter(Filter${entity.name} filter${entity.name}, Boolean equals);
	
	List<${entity.name}> filter(PaginationParams paginationParams, Boolean equals);
	
	List<${entity.name}> search(String searchText);

	${entity.name} save(${entity.name} entity);

	${entity.name} update(${entity.name} entity);
	
    List<${entity.name}> last(LocalDateTime lastSyncDate);		

	Boolean delete(Integer id);
	<#if entity.hasOwner?? &&  entity.hasOwner>
	${entity.name} get(Integer id, CustomerOwner client);

	List<${entity.name}> all(CustomerOwner owner);
	
	List<${entity.name}> filter(Filter${entity.name} filter${entity.name}, CustomerOwner owner, Boolean equals);
	
	List<${entity.name}> filter(PaginationParams paginationParams, CustomerOwner owner, Boolean equals);
	
	List<${entity.name}> filter(PaginationParams paginationParams, CustomerOwner owner);
	
	Pager<${entity.name}> all(PaginationParams paginationParams, CustomerOwner owner);
	</#if>
}
//generated by JSetup ${JSetupVersion} :  at ${.now}