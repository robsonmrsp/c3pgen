package ${package}.json;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.Serializable;
import java.io.Serial;
import java.util.ArrayList;
import java.util.List;

import java.time.LocalDate;
import java.time.LocalDateTime;
import com.fasterxml.jackson.annotation.JsonInclude;
<#-- import com.fasterxml.jackson.annotation.JsonIgnoreProperties; -->     
<#-- import com.fasterxml.jackson.databind.annotation.JsonDeserialize; -->

<#-- import ${corepackage}.json.SyncOperation; -->
<#-- import ${corepackage}.serialization.CustomSyncObjectIdDeserializer; -->
<#-- import ${corepackage}.serialization.CustomDoubleDeserializer; -->

/* generated by JSetup ${JSetupVersion} :  at ${.now} */
<#-- @JsonIgnoreProperties(ignoreUnknown = true) -->
@Data
@Builder
@EqualsAndHashCode
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Json${entity.name} implements Serializable {
	@Serial
	private static final long serialVersionUID = 1L;
<#--	@JsonDeserialize(using = CustomSyncObjectIdDeserializer.class) -->
	private Integer id;
<#--		private SyncOperation syncOperation; -->
	<#if entity.attributes??>		
	<#list entity.attributes as att>
		<#if att.name != 'id'>		
		<#if dataType(att.type.className) ==  "LocalDateTime" >
	private LocalDateTime ${att.name};
		<#elseif  dataType(att.type.className) ==  "LocalDate" >
	private LocalDate ${att.name};  			
		<#elseif dataType(att.type.className)!=''>
			<#if dataType(att.type.className) == 'Double'>
<#--	@JsonDeserialize(using = CustomDoubleDeserializer.class) -->
			</#if>  
	private ${dataType(att.type.className)} ${att.name};
		<#else>  			
	private Json${att.type.className} ${att.name};
		</#if>  
		</#if>
	</#list>
	</#if>
<#-- -->
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'OneToMany'>
	private ArrayList<Json${firstUpper(rel.model)}> ${firstLower(rel.name)} = new ArrayList<>();
		<#elseif rel.type == 'ManyToOne'>
	private Json${firstUpper(rel.model)} ${firstLower(rel.name)};		
		<#elseif rel.type == 'ManyToMany'>
	private ArrayList<Json${firstUpper(rel.model)}> ${firstLower(rel.name)} = new ArrayList<>();
		<#elseif rel.type == 'OneToOne'>
	private Json${firstUpper(rel.model)} ${firstLower(rel.name)};	
		</#if>
	</#list>
	</#if>
	
	public  Json${firstUpper(entity.name)}() {
	    super();
	}
}
//generated by JSetup ${JSetupVersion} :  at ${.now}