package ${application.rootPackage}.persistence;

import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Named;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import ${application.rootPackage}.model.${entity.name};
import ${application.corePackage}.persistence.HibernateDao;
import ${application.corePackage}.persistence.pagination.PaginationParams;
import ${application.corePackage}.persistence.pagination.Pager;

import ${application.rootPackage}.model.${entity.name};
import ${application.rootPackage}.model.filter.Filter${entity.name};

<#if application.multitenancy>
import ${application.corePackage}.model.Owner;
</#if>	
/* generated by JSetup ${JSetupVersion} :  at ${.now} */
@Named
@SuppressWarnings("rawtypes")
public class Dao${entity.name} extends HibernateDao<${entity.name}> {
	private static final Logger LOGGER = Logger.getLogger(Dao${entity.name}.class);

	public Dao${entity.name}() {
		super(${entity.name}.class);
	}
	<#if entity.attributes??>	
	<#list entity.attributes as att>
	<#if att.unique == true>
		<#if application.multitenancy>
	public ${entity.name} findBy${firstUpper(att.name)}(String ${att.name}, Owner owner) {
		${entity.name} ${firstLower(entity.name)} = null;
		try {
			${firstLower(entity.name)} = (${entity.name}) criteria().add(Restrictions.eq("${att.name}", ${att.name})).add(Restrictions.eq("owner", owner)).uniqueResult();
		} catch (Exception e) {
			LOGGER.error("Erro ao obter ${entity.displayName} pelo ${att.name}," + ${att.name}, e);
		}
		return ${firstLower(entity.name)};
	}
		<#else>
	public ${entity.name} findBy${firstUpper(att.name)}(String ${att.name}) {
		${entity.name} ${firstLower(entity.name)} = null;
		try {
			${firstLower(entity.name)} = (${entity.name}) criteria().add(Restrictions.eq("${att.name}", ${att.name})).uniqueResult();
		} catch (Exception e) {
			LOGGER.error("Erro ao obter ${entity.displayName} pelo ${att.name}," + ${att.name}, e);
		}
		return ${firstLower(entity.name)};
	}
		</#if>	
	</#if>	
	</#list>
	</#if>	

//Consultas considerando o multitenancy	
<#if application.multitenancy>
	@Override
	public Pager<${entity.name}> getAll(PaginationParams<Filter${entity.name}> queryParams, Owner owner) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		CriteriaQuery<Long> queryCount = builder.createQuery(Long.class);
		Root<${entity.name}> rootCount = queryCount.from(${entity.name}.class);

		Predicate whereClause = builder.and();
		
		whereClause = builder.and(whereClause, builder.equal(root.get("owner").get("id"),owner.getId()));
		
	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>	
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));
		TypedQuery<Long> typedCountQuery = getSession().createQuery(queryCount.select(builder.count(rootCount)).where(whereClause));

		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();
		Long total = typedCountQuery.getSingleResult();

		return new Pager<${entity.name}>(results, queryParams.getPage(), total);
	}
	
	public List<${entity.name}> filter(PaginationParams<Filter${entity.name}> queryParams, Owner owner) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();
		
		whereClause = builder.and(whereClause, builder.equal(root.get("owner").get("id"),owner.getId()));
		
	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));
	
		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();
	
		return results;
	}

	public List<${entity.name}> filter(PaginationParams paginationParams, Client owner, Boolean equals) {
		List<${entity.name}> list = new ArrayList<${entity.name}>();
		Filter${entity.name} filter${entity.name} = (Filter${entity.name}) paginationParams.getFilter();

		return filter(filter${entity.name}, owner, equals);
	}

	public List<${entity.name}> filter(PaginationParams<Filter${entity.name}> queryParams, Owner owner) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

		whereClause = builder.and(whereClause, builder.equal(root.get("owner").get("id"), owner.getId()));

	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
	
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));

		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();

		return results;
	}


	public List<${entity.name}> filter(Filter${entity.name} filter${entity.name}, Client owner, Boolean equals) {
		if (equals) {
			return filterEqual(filter${entity.name}, owner);
		} else {
			return filterAlike(filter${entity.name}, owner);
		}
	}

	public List<${entity.name}> filterEqual(Filter${entity.name} filter${entity.name}, Owner owner) {
		CriteriaBuilder builder = getCriteriaBuilder();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

		whereClause = builder.and(whereClause, builder.equal(root.get("owner").get("id"), owner.getId()));

	<#if entity.attributes??>	
	<#list entity.attributes as att>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause));

		List<${entity.name}> results = typedQuery.getResultList();

		return results;
	}

	public List<${entity.name}> filterAlike(Filter${entity.name} filter${entity.name}, Owner owner) {
		CriteriaBuilder builder = getCriteriaBuilder();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

		whereClause = builder.and(whereClause, builder.equal(root.get("owner").get("id"), owner.getId()));

	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
	
		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause));

		List<${entity.name}> results = typedQuery.getResultList();

		return results;
	}
<#else>
	@Override
	public Pager<${entity.name}> getAll(PaginationParams<Filter${entity.name}> queryParams) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		CriteriaQuery<Long> queryCount = builder.createQuery(Long.class);
		Root<${entity.name}> rootCount = queryCount.from(${entity.name}.class);

		Predicate whereClause = builder.and();
				
	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>	
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));
		TypedQuery<Long> typedCountQuery = getSession().createQuery(queryCount.select(builder.count(rootCount)).where(whereClause));

		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();
		Long total = typedCountQuery.getSingleResult();

		return new Pager<${entity.name}>(results, queryParams.getPage(), total);
	}
	
	public List<${entity.name}> filter(PaginationParams<Filter${entity.name}> queryParams) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();
		
	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));
	
		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();
	
		return results;
	}

	public List<${entity.name}> filter(PaginationParams paginationParams,  Boolean equals) {
		List<${entity.name}> list = new ArrayList<${entity.name}>();
		Filter${entity.name} filter${entity.name} = (Filter${entity.name}) paginationParams.getFilter();

		return filter(filter${entity.name},  equals);
	}

	public List<${entity.name}> filter(PaginationParams<Filter${entity.name}> queryParams) {
		CriteriaBuilder builder = getCriteriaBuilder();
		Filter${entity.name} filter${entity.name} = queryParams.getFilter();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
	
		Order orderBy = getOrderBy(queryParams, builder, root);

		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause).orderBy(orderBy));

		List<${entity.name}> results = typedQuery.setFirstResult(queryParams.getFirstResults()).setMaxResults(queryParams.getPageSize()).getResultList();

		return results;
	}


	public List<${entity.name}> filter(Filter${entity.name} filter${entity.name}, Boolean equals) {
		if (equals) {
			return filterEqual(filter${entity.name});
		} else {
			return filterAlike(filter${entity.name});
		}
	}

	public List<${entity.name}> filterEqual(Filter${entity.name} filter${entity.name}) {
		CriteriaBuilder builder = getCriteriaBuilder();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

	<#if entity.attributes??>	
	<#list entity.attributes as att>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause));

		List<${entity.name}> results = typedQuery.getResultList();

		return results;
	}

	public List<${entity.name}> filterAlike(Filter${entity.name} filter${entity.name}) {
		CriteriaBuilder builder = getCriteriaBuilder();

		CriteriaQuery<${entity.name}> query = builder.createQuery(${entity.name}.class);
		Root<${entity.name}> root = query.from(${entity.name}.class);

		Predicate whereClause = builder.and();

	<#if entity.attributes??>	
	<#list entity.attributes as att>
      	<#if att.type.className == 'String'>	
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.like(builder.upper(root.get("${att.name}")), "%" + filter${entity.name}.get${firstUpper(att.name)}().toUpperCase() + "%"));
		}
		<#else>
		if (filter${entity.name}.get${firstUpper(att.name)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${att.name}"), filter${entity.name}.get${firstUpper(att.name)}()));
		}				
		</#if>	
	</#list>
	</#if>	
	<#if entity.relationships??>	
	<#list entity.relationships as rel>
		<#if rel.type == 'ManyToOne'>
		if (filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() != null) {
			whereClause = builder.and(whereClause, builder.equal(root.get("${firstLower(rel.name)!firstLower(rel.model)}").get("id"), filter${entity.name}.get${firstUpper(rel.name)!firstLower(rel.model)}() ));
		}
		</#if>	
	</#list>
	</#if>
	
		TypedQuery<${entity.name}> typedQuery = getSession().createQuery(query.select(root).where(whereClause));

		List<${entity.name}> results = typedQuery.getResultList();

		return results;
	}
</#if>
	
}

//generated by JSetup ${JSetupVersion} :  at ${.now}