	
	############################################################################
				Configuração do beans.xml referente aos novos serviços.
	############################################################################
	<jaxrs:server id="services" address="/">
		<jaxrs:serviceBeans>
				<bean class="br.com.sints.app.rs.ApplicationResources" />
		<bean class="br.com.sints.app.rs.AttributeResources" />
		<bean class="br.com.sints.app.rs.AttributeTypeResources" />
		<bean class="br.com.sints.app.rs.TheEntityResources" />
		<bean class="br.com.sints.app.rs.RelationshipResources" />
		<bean class="br.com.sints.app.rs.ViewApproachResources" />
		<bean class="br.com.sints.app.rs.BairroResources" />
		<bean class="br.com.sints.app.rs.CepResources" />
		<bean class="br.com.sints.app.rs.CidadeResources" />
		<bean class="br.com.sints.app.rs.EnderecoResources" />
		<bean class="br.com.sints.app.rs.EstadoResources" />
		<bean class="br.com.sints.app.rs.PaisResources" />
		<bean class="br.com.sints.app.rs.ClientResources" />
		<bean class="br.com.sints.app.rs.ClienteResources" />
		<bean class="br.com.sints.app.rs.ItemResources" />
		<bean class="br.com.sints.app.rs.ItemTypeResources" />
		<bean class="br.com.sints.app.rs.OperationResources" />
		<bean class="br.com.sints.app.rs.PermissionResources" />
		<bean class="br.com.sints.app.rs.RoleResources" />
		<bean class="br.com.sints.app.rs.SessionResources" />
		<bean class="br.com.sints.app.rs.UserResources" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
		</jaxrs:providers>
	</jaxrs:server>
	
	
	############################################################################
						Router para as entidades criadas
	############################################################################

		var PageApplication = require('views/application/PageApplication');
		var FormApplication = require('views/application/FormApplication');
		var ApplicationModel = require('models/ApplicationModel');
		var PageAttribute = require('views/attribute/PageAttribute');
		var FormAttribute = require('views/attribute/FormAttribute');
		var AttributeModel = require('models/AttributeModel');
		var PageAttributeType = require('views/attributeType/PageAttributeType');
		var FormAttributeType = require('views/attributeType/FormAttributeType');
		var AttributeTypeModel = require('models/AttributeTypeModel');
		var PageTheEntity = require('views/theEntity/PageTheEntity');
		var FormTheEntity = require('views/theEntity/FormTheEntity');
		var TheEntityModel = require('models/TheEntityModel');
		var PageRelationship = require('views/relationship/PageRelationship');
		var FormRelationship = require('views/relationship/FormRelationship');
		var RelationshipModel = require('models/RelationshipModel');
		var PageViewApproach = require('views/viewApproach/PageViewApproach');
		var FormViewApproach = require('views/viewApproach/FormViewApproach');
		var ViewApproachModel = require('models/ViewApproachModel');
		var PageBairro = require('views/bairro/PageBairro');
		var FormBairro = require('views/bairro/FormBairro');
		var BairroModel = require('models/BairroModel');
		var PageCep = require('views/cep/PageCep');
		var FormCep = require('views/cep/FormCep');
		var CepModel = require('models/CepModel');
		var PageCidade = require('views/cidade/PageCidade');
		var FormCidade = require('views/cidade/FormCidade');
		var CidadeModel = require('models/CidadeModel');
		var PageEndereco = require('views/endereco/PageEndereco');
		var FormEndereco = require('views/endereco/FormEndereco');
		var EnderecoModel = require('models/EnderecoModel');
		var PageEstado = require('views/estado/PageEstado');
		var FormEstado = require('views/estado/FormEstado');
		var EstadoModel = require('models/EstadoModel');
		var PagePais = require('views/pais/PagePais');
		var FormPais = require('views/pais/FormPais');
		var PaisModel = require('models/PaisModel');
		var PageClient = require('views/client/PageClient');
		var FormClient = require('views/client/FormClient');
		var ClientModel = require('models/ClientModel');
		var PageCliente = require('views/cliente/PageCliente');
		var FormCliente = require('views/cliente/FormCliente');
		var ClienteModel = require('models/ClienteModel');
		var PageItem = require('views/item/PageItem');
		var FormItem = require('views/item/FormItem');
		var ItemModel = require('models/ItemModel');
		var PageItemType = require('views/itemType/PageItemType');
		var FormItemType = require('views/itemType/FormItemType');
		var ItemTypeModel = require('models/ItemTypeModel');
		var PageOperation = require('views/operation/PageOperation');
		var FormOperation = require('views/operation/FormOperation');
		var OperationModel = require('models/OperationModel');
		var PagePermission = require('views/permission/PagePermission');
		var FormPermission = require('views/permission/FormPermission');
		var PermissionModel = require('models/PermissionModel');
		var PageRole = require('views/role/PageRole');
		var FormRole = require('views/role/FormRole');
		var RoleModel = require('models/RoleModel');
		var PageSession = require('views/session/PageSession');
		var FormSession = require('views/session/FormSession');
		var SessionModel = require('models/SessionModel');
		var PageUser = require('views/user/PageUser');
		var FormUser = require('views/user/FormUser');
		var UserModel = require('models/UserModel');
	
			// hashs de Application
			'app/applications' : 'applications',
			'app/newApplication' : 'newApplication',
			'app/editApplication/:id' : 'editApplication',
			// hashs de Attribute
			'app/attributes' : 'attributes',
			'app/newAttribute' : 'newAttribute',
			'app/editAttribute/:id' : 'editAttribute',
			// hashs de AttributeType
			'app/attributeTypes' : 'attributeTypes',
			'app/newAttributeType' : 'newAttributeType',
			'app/editAttributeType/:id' : 'editAttributeType',
			// hashs de TheEntity
			'app/theEntitys' : 'theEntitys',
			'app/newTheEntity' : 'newTheEntity',
			'app/editTheEntity/:id' : 'editTheEntity',
			// hashs de Relationship
			'app/relationships' : 'relationships',
			'app/newRelationship' : 'newRelationship',
			'app/editRelationship/:id' : 'editRelationship',
			// hashs de ViewApproach
			'app/viewApproachs' : 'viewApproachs',
			'app/newViewApproach' : 'newViewApproach',
			'app/editViewApproach/:id' : 'editViewApproach',
			// hashs de Bairro
			'app/bairros' : 'bairros',
			'app/newBairro' : 'newBairro',
			'app/editBairro/:id' : 'editBairro',
			// hashs de Cep
			'app/ceps' : 'ceps',
			'app/newCep' : 'newCep',
			'app/editCep/:id' : 'editCep',
			// hashs de Cidade
			'app/cidades' : 'cidades',
			'app/newCidade' : 'newCidade',
			'app/editCidade/:id' : 'editCidade',
			// hashs de Endereco
			'app/enderecos' : 'enderecos',
			'app/newEndereco' : 'newEndereco',
			'app/editEndereco/:id' : 'editEndereco',
			// hashs de Estado
			'app/estados' : 'estados',
			'app/newEstado' : 'newEstado',
			'app/editEstado/:id' : 'editEstado',
			// hashs de Pais
			'app/paiss' : 'paiss',
			'app/newPais' : 'newPais',
			'app/editPais/:id' : 'editPais',
			// hashs de Client
			'app/clients' : 'clients',
			'app/newClient' : 'newClient',
			'app/editClient/:id' : 'editClient',
			// hashs de Cliente
			'app/clientes' : 'clientes',
			'app/newCliente' : 'newCliente',
			'app/editCliente/:id' : 'editCliente',
			// hashs de Item
			'app/items' : 'items',
			'app/newItem' : 'newItem',
			'app/editItem/:id' : 'editItem',
			// hashs de ItemType
			'app/itemTypes' : 'itemTypes',
			'app/newItemType' : 'newItemType',
			'app/editItemType/:id' : 'editItemType',
			// hashs de Operation
			'app/operations' : 'operations',
			'app/newOperation' : 'newOperation',
			'app/editOperation/:id' : 'editOperation',
			// hashs de Permission
			'app/permissions' : 'permissions',
			'app/newPermission' : 'newPermission',
			'app/editPermission/:id' : 'editPermission',
			// hashs de Role
			'app/roles' : 'roles',
			'app/newRole' : 'newRole',
			'app/editRole/:id' : 'editRole',
			// hashs de Session
			'app/sessions' : 'sessions',
			'app/newSession' : 'newSession',
			'app/editSession/:id' : 'editSession',
			// hashs de User
			'app/users' : 'users',
			'app/newUser' : 'newUser',
			'app/editUser/:id' : 'editUser',
			
			//configuração das rotas de Application
			appRouter.on('route:applications', function() {
				util.markActiveItem('applications');
				appRouter.pageApplication = new PageApplication();
				App.mainRegion.show(appRouter.pageApplication);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Application',
					itemSubFolderName : 'Grid',
					url : 'app/applications'
				});
			});
	
			appRouter.on('route:newApplication', function() {
				util.markActiveItem('applications');
				var formApplication = new FormApplication({
					model : new ApplicationModel(),
				});
				App.mainRegion.show(formApplication);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Application',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/applications'
				});
			});
			
			appRouter.on('route:editApplication', function(idApplication) {
				util.markActiveItem('applications');
				var formApplication = null;
				if (appRouter.pageApplication) {
					formApplication = new FormApplication({
						model : appRouter.pageApplication.applications.get(idApplication),
					});
					App.mainRegion.show(formApplication);
				} else {
					var model = new ApplicationModel({
						id : idApplication,
					})
					model.fetch({
						success : function(model) {
							formApplication = new FormApplication({
								model : model,
							});
							App.mainRegion.show(formApplication);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Applicationos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/applications'
					});
				}
			});
			//configuração das rotas de Attribute
			appRouter.on('route:attributes', function() {
				util.markActiveItem('attributes');
				appRouter.pageAttribute = new PageAttribute();
				App.mainRegion.show(appRouter.pageAttribute);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Attribute',
					itemSubFolderName : 'Grid',
					url : 'app/attributes'
				});
			});
	
			appRouter.on('route:newAttribute', function() {
				util.markActiveItem('attributes');
				var formAttribute = new FormAttribute({
					model : new AttributeModel(),
				});
				App.mainRegion.show(formAttribute);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Attribute',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/attributes'
				});
			});
			
			appRouter.on('route:editAttribute', function(idAttribute) {
				util.markActiveItem('attributes');
				var formAttribute = null;
				if (appRouter.pageAttribute) {
					formAttribute = new FormAttribute({
						model : appRouter.pageAttribute.attributes.get(idAttribute),
					});
					App.mainRegion.show(formAttribute);
				} else {
					var model = new AttributeModel({
						id : idAttribute,
					})
					model.fetch({
						success : function(model) {
							formAttribute = new FormAttribute({
								model : model,
							});
							App.mainRegion.show(formAttribute);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Attributeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/attributes'
					});
				}
			});
			//configuração das rotas de AttributeType
			appRouter.on('route:attributeTypes', function() {
				util.markActiveItem('attributeTypes');
				appRouter.pageAttributeType = new PageAttributeType();
				App.mainRegion.show(appRouter.pageAttributeType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'AttributeType',
					itemSubFolderName : 'Grid',
					url : 'app/attributeTypes'
				});
			});
	
			appRouter.on('route:newAttributeType', function() {
				util.markActiveItem('attributeTypes');
				var formAttributeType = new FormAttributeType({
					model : new AttributeTypeModel(),
				});
				App.mainRegion.show(formAttributeType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'AttributeType',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/attributeTypes'
				});
			});
			
			appRouter.on('route:editAttributeType', function(idAttributeType) {
				util.markActiveItem('attributeTypes');
				var formAttributeType = null;
				if (appRouter.pageAttributeType) {
					formAttributeType = new FormAttributeType({
						model : appRouter.pageAttributeType.attributeTypes.get(idAttributeType),
					});
					App.mainRegion.show(formAttributeType);
				} else {
					var model = new AttributeTypeModel({
						id : idAttributeType,
					})
					model.fetch({
						success : function(model) {
							formAttributeType = new FormAttributeType({
								model : model,
							});
							App.mainRegion.show(formAttributeType);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'AttributeTypeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/attributeTypes'
					});
				}
			});
			//configuração das rotas de TheEntity
			appRouter.on('route:theEntitys', function() {
				util.markActiveItem('theEntitys');
				appRouter.pageTheEntity = new PageTheEntity();
				App.mainRegion.show(appRouter.pageTheEntity);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'TheEntity',
					itemSubFolderName : 'Grid',
					url : 'app/theEntitys'
				});
			});
	
			appRouter.on('route:newTheEntity', function() {
				util.markActiveItem('theEntitys');
				var formTheEntity = new FormTheEntity({
					model : new TheEntityModel(),
				});
				App.mainRegion.show(formTheEntity);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'TheEntity',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/theEntitys'
				});
			});
			
			appRouter.on('route:editTheEntity', function(idTheEntity) {
				util.markActiveItem('theEntitys');
				var formTheEntity = null;
				if (appRouter.pageTheEntity) {
					formTheEntity = new FormTheEntity({
						model : appRouter.pageTheEntity.theEntitys.get(idTheEntity),
					});
					App.mainRegion.show(formTheEntity);
				} else {
					var model = new TheEntityModel({
						id : idTheEntity,
					})
					model.fetch({
						success : function(model) {
							formTheEntity = new FormTheEntity({
								model : model,
							});
							App.mainRegion.show(formTheEntity);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'TheEntityos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/theEntitys'
					});
				}
			});
			//configuração das rotas de Relationship
			appRouter.on('route:relationships', function() {
				util.markActiveItem('relationships');
				appRouter.pageRelationship = new PageRelationship();
				App.mainRegion.show(appRouter.pageRelationship);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Relationship',
					itemSubFolderName : 'Grid',
					url : 'app/relationships'
				});
			});
	
			appRouter.on('route:newRelationship', function() {
				util.markActiveItem('relationships');
				var formRelationship = new FormRelationship({
					model : new RelationshipModel(),
				});
				App.mainRegion.show(formRelationship);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Relationship',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/relationships'
				});
			});
			
			appRouter.on('route:editRelationship', function(idRelationship) {
				util.markActiveItem('relationships');
				var formRelationship = null;
				if (appRouter.pageRelationship) {
					formRelationship = new FormRelationship({
						model : appRouter.pageRelationship.relationships.get(idRelationship),
					});
					App.mainRegion.show(formRelationship);
				} else {
					var model = new RelationshipModel({
						id : idRelationship,
					})
					model.fetch({
						success : function(model) {
							formRelationship = new FormRelationship({
								model : model,
							});
							App.mainRegion.show(formRelationship);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Relationshipos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/relationships'
					});
				}
			});
			//configuração das rotas de ViewApproach
			appRouter.on('route:viewApproachs', function() {
				util.markActiveItem('viewApproachs');
				appRouter.pageViewApproach = new PageViewApproach();
				App.mainRegion.show(appRouter.pageViewApproach);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ViewApproach',
					itemSubFolderName : 'Grid',
					url : 'app/viewApproachs'
				});
			});
	
			appRouter.on('route:newViewApproach', function() {
				util.markActiveItem('viewApproachs');
				var formViewApproach = new FormViewApproach({
					model : new ViewApproachModel(),
				});
				App.mainRegion.show(formViewApproach);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ViewApproach',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/viewApproachs'
				});
			});
			
			appRouter.on('route:editViewApproach', function(idViewApproach) {
				util.markActiveItem('viewApproachs');
				var formViewApproach = null;
				if (appRouter.pageViewApproach) {
					formViewApproach = new FormViewApproach({
						model : appRouter.pageViewApproach.viewApproachs.get(idViewApproach),
					});
					App.mainRegion.show(formViewApproach);
				} else {
					var model = new ViewApproachModel({
						id : idViewApproach,
					})
					model.fetch({
						success : function(model) {
							formViewApproach = new FormViewApproach({
								model : model,
							});
							App.mainRegion.show(formViewApproach);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'ViewApproachos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/viewApproachs'
					});
				}
			});
			//configuração das rotas de Bairro
			appRouter.on('route:bairros', function() {
				util.markActiveItem('bairros');
				appRouter.pageBairro = new PageBairro();
				App.mainRegion.show(appRouter.pageBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Grid',
					url : 'app/bairros'
				});
			});
	
			appRouter.on('route:newBairro', function() {
				util.markActiveItem('bairros');
				var formBairro = new FormBairro({
					model : new BairroModel(),
				});
				App.mainRegion.show(formBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/bairros'
				});
			});
			
			appRouter.on('route:editBairro', function(idBairro) {
				util.markActiveItem('bairros');
				var formBairro = null;
				if (appRouter.pageBairro) {
					formBairro = new FormBairro({
						model : appRouter.pageBairro.bairros.get(idBairro),
					});
					App.mainRegion.show(formBairro);
				} else {
					var model = new BairroModel({
						id : idBairro,
					})
					model.fetch({
						success : function(model) {
							formBairro = new FormBairro({
								model : model,
							});
							App.mainRegion.show(formBairro);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Bairroos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/bairros'
					});
				}
			});
			//configuração das rotas de Cep
			appRouter.on('route:ceps', function() {
				util.markActiveItem('ceps');
				appRouter.pageCep = new PageCep();
				App.mainRegion.show(appRouter.pageCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Grid',
					url : 'app/ceps'
				});
			});
	
			appRouter.on('route:newCep', function() {
				util.markActiveItem('ceps');
				var formCep = new FormCep({
					model : new CepModel(),
				});
				App.mainRegion.show(formCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/ceps'
				});
			});
			
			appRouter.on('route:editCep', function(idCep) {
				util.markActiveItem('ceps');
				var formCep = null;
				if (appRouter.pageCep) {
					formCep = new FormCep({
						model : appRouter.pageCep.ceps.get(idCep),
					});
					App.mainRegion.show(formCep);
				} else {
					var model = new CepModel({
						id : idCep,
					})
					model.fetch({
						success : function(model) {
							formCep = new FormCep({
								model : model,
							});
							App.mainRegion.show(formCep);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cepos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/ceps'
					});
				}
			});
			//configuração das rotas de Cidade
			appRouter.on('route:cidades', function() {
				util.markActiveItem('cidades');
				appRouter.pageCidade = new PageCidade();
				App.mainRegion.show(appRouter.pageCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Grid',
					url : 'app/cidades'
				});
			});
	
			appRouter.on('route:newCidade', function() {
				util.markActiveItem('cidades');
				var formCidade = new FormCidade({
					model : new CidadeModel(),
				});
				App.mainRegion.show(formCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cidades'
				});
			});
			
			appRouter.on('route:editCidade', function(idCidade) {
				util.markActiveItem('cidades');
				var formCidade = null;
				if (appRouter.pageCidade) {
					formCidade = new FormCidade({
						model : appRouter.pageCidade.cidades.get(idCidade),
					});
					App.mainRegion.show(formCidade);
				} else {
					var model = new CidadeModel({
						id : idCidade,
					})
					model.fetch({
						success : function(model) {
							formCidade = new FormCidade({
								model : model,
							});
							App.mainRegion.show(formCidade);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cidadeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cidades'
					});
				}
			});
			//configuração das rotas de Endereco
			appRouter.on('route:enderecos', function() {
				util.markActiveItem('enderecos');
				appRouter.pageEndereco = new PageEndereco();
				App.mainRegion.show(appRouter.pageEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Grid',
					url : 'app/enderecos'
				});
			});
	
			appRouter.on('route:newEndereco', function() {
				util.markActiveItem('enderecos');
				var formEndereco = new FormEndereco({
					model : new EnderecoModel(),
				});
				App.mainRegion.show(formEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/enderecos'
				});
			});
			
			appRouter.on('route:editEndereco', function(idEndereco) {
				util.markActiveItem('enderecos');
				var formEndereco = null;
				if (appRouter.pageEndereco) {
					formEndereco = new FormEndereco({
						model : appRouter.pageEndereco.enderecos.get(idEndereco),
					});
					App.mainRegion.show(formEndereco);
				} else {
					var model = new EnderecoModel({
						id : idEndereco,
					})
					model.fetch({
						success : function(model) {
							formEndereco = new FormEndereco({
								model : model,
							});
							App.mainRegion.show(formEndereco);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Enderecoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/enderecos'
					});
				}
			});
			//configuração das rotas de Estado
			appRouter.on('route:estados', function() {
				util.markActiveItem('estados');
				appRouter.pageEstado = new PageEstado();
				App.mainRegion.show(appRouter.pageEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Grid',
					url : 'app/estados'
				});
			});
	
			appRouter.on('route:newEstado', function() {
				util.markActiveItem('estados');
				var formEstado = new FormEstado({
					model : new EstadoModel(),
				});
				App.mainRegion.show(formEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/estados'
				});
			});
			
			appRouter.on('route:editEstado', function(idEstado) {
				util.markActiveItem('estados');
				var formEstado = null;
				if (appRouter.pageEstado) {
					formEstado = new FormEstado({
						model : appRouter.pageEstado.estados.get(idEstado),
					});
					App.mainRegion.show(formEstado);
				} else {
					var model = new EstadoModel({
						id : idEstado,
					})
					model.fetch({
						success : function(model) {
							formEstado = new FormEstado({
								model : model,
							});
							App.mainRegion.show(formEstado);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Estadoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/estados'
					});
				}
			});
			//configuração das rotas de Pais
			appRouter.on('route:paiss', function() {
				util.markActiveItem('paiss');
				appRouter.pagePais = new PagePais();
				App.mainRegion.show(appRouter.pagePais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Grid',
					url : 'app/paiss'
				});
			});
	
			appRouter.on('route:newPais', function() {
				util.markActiveItem('paiss');
				var formPais = new FormPais({
					model : new PaisModel(),
				});
				App.mainRegion.show(formPais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/paiss'
				});
			});
			
			appRouter.on('route:editPais', function(idPais) {
				util.markActiveItem('paiss');
				var formPais = null;
				if (appRouter.pagePais) {
					formPais = new FormPais({
						model : appRouter.pagePais.paiss.get(idPais),
					});
					App.mainRegion.show(formPais);
				} else {
					var model = new PaisModel({
						id : idPais,
					})
					model.fetch({
						success : function(model) {
							formPais = new FormPais({
								model : model,
							});
							App.mainRegion.show(formPais);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Paisos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/paiss'
					});
				}
			});
			//configuração das rotas de Client
			appRouter.on('route:clients', function() {
				util.markActiveItem('clients');
				appRouter.pageClient = new PageClient();
				App.mainRegion.show(appRouter.pageClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Grid',
					url : 'app/clients'
				});
			});
	
			appRouter.on('route:newClient', function() {
				util.markActiveItem('clients');
				var formClient = new FormClient({
					model : new ClientModel(),
				});
				App.mainRegion.show(formClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/clients'
				});
			});
			
			appRouter.on('route:editClient', function(idClient) {
				util.markActiveItem('clients');
				var formClient = null;
				if (appRouter.pageClient) {
					formClient = new FormClient({
						model : appRouter.pageClient.clients.get(idClient),
					});
					App.mainRegion.show(formClient);
				} else {
					var model = new ClientModel({
						id : idClient,
					})
					model.fetch({
						success : function(model) {
							formClient = new FormClient({
								model : model,
							});
							App.mainRegion.show(formClient);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Clientos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/clients'
					});
				}
			});
			//configuração das rotas de Cliente
			appRouter.on('route:clientes', function() {
				util.markActiveItem('clientes');
				appRouter.pageCliente = new PageCliente();
				App.mainRegion.show(appRouter.pageCliente);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cliente',
					itemSubFolderName : 'Grid',
					url : 'app/clientes'
				});
			});
	
			appRouter.on('route:newCliente', function() {
				util.markActiveItem('clientes');
				var formCliente = new FormCliente({
					model : new ClienteModel(),
				});
				App.mainRegion.show(formCliente);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cliente',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/clientes'
				});
			});
			
			appRouter.on('route:editCliente', function(idCliente) {
				util.markActiveItem('clientes');
				var formCliente = null;
				if (appRouter.pageCliente) {
					formCliente = new FormCliente({
						model : appRouter.pageCliente.clientes.get(idCliente),
					});
					App.mainRegion.show(formCliente);
				} else {
					var model = new ClienteModel({
						id : idCliente,
					})
					model.fetch({
						success : function(model) {
							formCliente = new FormCliente({
								model : model,
							});
							App.mainRegion.show(formCliente);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Clienteos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/clientes'
					});
				}
			});
			//configuração das rotas de Item
			appRouter.on('route:items', function() {
				util.markActiveItem('items');
				appRouter.pageItem = new PageItem();
				App.mainRegion.show(appRouter.pageItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Grid',
					url : 'app/items'
				});
			});
	
			appRouter.on('route:newItem', function() {
				util.markActiveItem('items');
				var formItem = new FormItem({
					model : new ItemModel(),
				});
				App.mainRegion.show(formItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/items'
				});
			});
			
			appRouter.on('route:editItem', function(idItem) {
				util.markActiveItem('items');
				var formItem = null;
				if (appRouter.pageItem) {
					formItem = new FormItem({
						model : appRouter.pageItem.items.get(idItem),
					});
					App.mainRegion.show(formItem);
				} else {
					var model = new ItemModel({
						id : idItem,
					})
					model.fetch({
						success : function(model) {
							formItem = new FormItem({
								model : model,
							});
							App.mainRegion.show(formItem);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Itemos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/items'
					});
				}
			});
			//configuração das rotas de ItemType
			appRouter.on('route:itemTypes', function() {
				util.markActiveItem('itemTypes');
				appRouter.pageItemType = new PageItemType();
				App.mainRegion.show(appRouter.pageItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Grid',
					url : 'app/itemTypes'
				});
			});
	
			appRouter.on('route:newItemType', function() {
				util.markActiveItem('itemTypes');
				var formItemType = new FormItemType({
					model : new ItemTypeModel(),
				});
				App.mainRegion.show(formItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/itemTypes'
				});
			});
			
			appRouter.on('route:editItemType', function(idItemType) {
				util.markActiveItem('itemTypes');
				var formItemType = null;
				if (appRouter.pageItemType) {
					formItemType = new FormItemType({
						model : appRouter.pageItemType.itemTypes.get(idItemType),
					});
					App.mainRegion.show(formItemType);
				} else {
					var model = new ItemTypeModel({
						id : idItemType,
					})
					model.fetch({
						success : function(model) {
							formItemType = new FormItemType({
								model : model,
							});
							App.mainRegion.show(formItemType);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'ItemTypeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/itemTypes'
					});
				}
			});
			//configuração das rotas de Operation
			appRouter.on('route:operations', function() {
				util.markActiveItem('operations');
				appRouter.pageOperation = new PageOperation();
				App.mainRegion.show(appRouter.pageOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Grid',
					url : 'app/operations'
				});
			});
	
			appRouter.on('route:newOperation', function() {
				util.markActiveItem('operations');
				var formOperation = new FormOperation({
					model : new OperationModel(),
				});
				App.mainRegion.show(formOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/operations'
				});
			});
			
			appRouter.on('route:editOperation', function(idOperation) {
				util.markActiveItem('operations');
				var formOperation = null;
				if (appRouter.pageOperation) {
					formOperation = new FormOperation({
						model : appRouter.pageOperation.operations.get(idOperation),
					});
					App.mainRegion.show(formOperation);
				} else {
					var model = new OperationModel({
						id : idOperation,
					})
					model.fetch({
						success : function(model) {
							formOperation = new FormOperation({
								model : model,
							});
							App.mainRegion.show(formOperation);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Operationos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/operations'
					});
				}
			});
			//configuração das rotas de Permission
			appRouter.on('route:permissions', function() {
				util.markActiveItem('permissions');
				appRouter.pagePermission = new PagePermission();
				App.mainRegion.show(appRouter.pagePermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Grid',
					url : 'app/permissions'
				});
			});
	
			appRouter.on('route:newPermission', function() {
				util.markActiveItem('permissions');
				var formPermission = new FormPermission({
					model : new PermissionModel(),
				});
				App.mainRegion.show(formPermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/permissions'
				});
			});
			
			appRouter.on('route:editPermission', function(idPermission) {
				util.markActiveItem('permissions');
				var formPermission = null;
				if (appRouter.pagePermission) {
					formPermission = new FormPermission({
						model : appRouter.pagePermission.permissions.get(idPermission),
					});
					App.mainRegion.show(formPermission);
				} else {
					var model = new PermissionModel({
						id : idPermission,
					})
					model.fetch({
						success : function(model) {
							formPermission = new FormPermission({
								model : model,
							});
							App.mainRegion.show(formPermission);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Permissionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/permissions'
					});
				}
			});
			//configuração das rotas de Role
			appRouter.on('route:roles', function() {
				util.markActiveItem('roles');
				appRouter.pageRole = new PageRole();
				App.mainRegion.show(appRouter.pageRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Grid',
					url : 'app/roles'
				});
			});
	
			appRouter.on('route:newRole', function() {
				util.markActiveItem('roles');
				var formRole = new FormRole({
					model : new RoleModel(),
				});
				App.mainRegion.show(formRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/roles'
				});
			});
			
			appRouter.on('route:editRole', function(idRole) {
				util.markActiveItem('roles');
				var formRole = null;
				if (appRouter.pageRole) {
					formRole = new FormRole({
						model : appRouter.pageRole.roles.get(idRole),
					});
					App.mainRegion.show(formRole);
				} else {
					var model = new RoleModel({
						id : idRole,
					})
					model.fetch({
						success : function(model) {
							formRole = new FormRole({
								model : model,
							});
							App.mainRegion.show(formRole);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Roleos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/roles'
					});
				}
			});
			//configuração das rotas de Session
			appRouter.on('route:sessions', function() {
				util.markActiveItem('sessions');
				appRouter.pageSession = new PageSession();
				App.mainRegion.show(appRouter.pageSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Grid',
					url : 'app/sessions'
				});
			});
	
			appRouter.on('route:newSession', function() {
				util.markActiveItem('sessions');
				var formSession = new FormSession({
					model : new SessionModel(),
				});
				App.mainRegion.show(formSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/sessions'
				});
			});
			
			appRouter.on('route:editSession', function(idSession) {
				util.markActiveItem('sessions');
				var formSession = null;
				if (appRouter.pageSession) {
					formSession = new FormSession({
						model : appRouter.pageSession.sessions.get(idSession),
					});
					App.mainRegion.show(formSession);
				} else {
					var model = new SessionModel({
						id : idSession,
					})
					model.fetch({
						success : function(model) {
							formSession = new FormSession({
								model : model,
							});
							App.mainRegion.show(formSession);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Sessionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/sessions'
					});
				}
			});
			//configuração das rotas de User
			appRouter.on('route:users', function() {
				util.markActiveItem('users');
				appRouter.pageUser = new PageUser();
				App.mainRegion.show(appRouter.pageUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Grid',
					url : 'app/users'
				});
			});
	
			appRouter.on('route:newUser', function() {
				util.markActiveItem('users');
				var formUser = new FormUser({
					model : new UserModel(),
				});
				App.mainRegion.show(formUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/users'
				});
			});
			
			appRouter.on('route:editUser', function(idUser) {
				util.markActiveItem('users');
				var formUser = null;
				if (appRouter.pageUser) {
					formUser = new FormUser({
						model : appRouter.pageUser.users.get(idUser),
					});
					App.mainRegion.show(formUser);
				} else {
					var model = new UserModel({
						id : idUser,
					})
					model.fetch({
						success : function(model) {
							formUser = new FormUser({
								model : model,
							});
							App.mainRegion.show(formUser);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Useros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/users'
					});
				}
			});
			

	############################################################################
						Menu de cadastros
	############################################################################
			<li id="applications" class="">
				<a href="#app/applications">
					<i class="menu-icon fa fa-caret-right"></i>
					Application
				</a>
				<b class="arrow"></b>
			</li>
			<li id="attributes" class="">
				<a href="#app/attributes">
					<i class="menu-icon fa fa-caret-right"></i>
					Attribute
				</a>
				<b class="arrow"></b>
			</li>
			<li id="attributeTypes" class="">
				<a href="#app/attributeTypes">
					<i class="menu-icon fa fa-caret-right"></i>
					AttributeType
				</a>
				<b class="arrow"></b>
			</li>
			<li id="theEntitys" class="">
				<a href="#app/theEntitys">
					<i class="menu-icon fa fa-caret-right"></i>
					TheEntity
				</a>
				<b class="arrow"></b>
			</li>
			<li id="relationships" class="">
				<a href="#app/relationships">
					<i class="menu-icon fa fa-caret-right"></i>
					Relationship
				</a>
				<b class="arrow"></b>
			</li>
			<li id="viewApproachs" class="">
				<a href="#app/viewApproachs">
					<i class="menu-icon fa fa-caret-right"></i>
					ViewApproach
				</a>
				<b class="arrow"></b>
			</li>
			<li id="bairros" class="">
				<a href="#app/bairros">
					<i class="menu-icon fa fa-caret-right"></i>
					Bairro
				</a>
				<b class="arrow"></b>
			</li>
			<li id="ceps" class="">
				<a href="#app/ceps">
					<i class="menu-icon fa fa-caret-right"></i>
					Cep
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cidades" class="">
				<a href="#app/cidades">
					<i class="menu-icon fa fa-caret-right"></i>
					Cidade
				</a>
				<b class="arrow"></b>
			</li>
			<li id="enderecos" class="">
				<a href="#app/enderecos">
					<i class="menu-icon fa fa-caret-right"></i>
					Endereco
				</a>
				<b class="arrow"></b>
			</li>
			<li id="estados" class="">
				<a href="#app/estados">
					<i class="menu-icon fa fa-caret-right"></i>
					Estado
				</a>
				<b class="arrow"></b>
			</li>
			<li id="paiss" class="">
				<a href="#app/paiss">
					<i class="menu-icon fa fa-caret-right"></i>
					Pais
				</a>
				<b class="arrow"></b>
			</li>
			<li id="clients" class="">
				<a href="#app/clients">
					<i class="menu-icon fa fa-caret-right"></i>
					Cliente
				</a>
				<b class="arrow"></b>
			</li>
			<li id="clientes" class="">
				<a href="#app/clientes">
					<i class="menu-icon fa fa-caret-right"></i>
					Cliente
				</a>
				<b class="arrow"></b>
			</li>
			<li id="items" class="">
				<a href="#app/items">
					<i class="menu-icon fa fa-caret-right"></i>
					Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="itemTypes" class="">
				<a href="#app/itemTypes">
					<i class="menu-icon fa fa-caret-right"></i>
					Tipo de Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="operations" class="">
				<a href="#app/operations">
					<i class="menu-icon fa fa-caret-right"></i>
					Operação
				</a>
				<b class="arrow"></b>
			</li>
			<li id="permissions" class="">
				<a href="#app/permissions">
					<i class="menu-icon fa fa-caret-right"></i>
					Permissão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="roles" class="">
				<a href="#app/roles">
					<i class="menu-icon fa fa-caret-right"></i>
					Papel
				</a>
				<b class="arrow"></b>
			</li>
			<li id="sessions" class="">
				<a href="#app/sessions">
					<i class="menu-icon fa fa-caret-right"></i>
					Sessão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="users" class="">
				<a href="#app/users">
					<i class="menu-icon fa fa-caret-right"></i>
					Usuário
				</a>
				<b class="arrow"></b>
			</li>
		
	############################################################################
						Parser json-> objeto objeto -> json
	############################################################################
	//converte de entidade para json
	public static JsonApplication toJson(Application application) {
		JsonApplication jsonApplication = new JsonApplication();
		
		jsonApplication.setId(application.getId());
	    jsonApplication.setName(application.getName());
	    jsonApplication.setSkin(application.getSkin());
	    jsonApplication.setRootPackage(application.getRootPackage());
		return jsonApplication;
	}

	public static Application toEntity(JsonApplication jsonApplication) {
		Application application = new Application();
		
		application.setId(jsonApplication.getId());
		application.setName(jsonApplication.getName());
		application.setSkin(jsonApplication.getSkin());
		application.setRootPackage(jsonApplication.getRootPackage());
		return application;
	}		
	
	public static List<JsonApplication> toListJsonApplications(List<Application> all) {
		List<JsonApplication> jsonApplications = new ArrayList<JsonApplication>();
		for (Application application : all) {
			jsonApplications.add(toJson(application));
		}
		return jsonApplications;
	}
	//converte de entidade para json
	public static JsonAttribute toJson(Attribute attribute) {
		JsonAttribute jsonAttribute = new JsonAttribute();
		
		jsonAttribute.setId(attribute.getId());
	    jsonAttribute.setName(attribute.getName());
	    jsonAttribute.setDisplayName(attribute.getDisplayName());
	    jsonAttribute.setMaxLen(attribute.getMaxLen());
	    jsonAttribute.setTableFieldName(attribute.getTableFieldName());
	    jsonAttribute.setMasc(attribute.getMasc());
	    jsonAttribute.setDefaultValue(attribute.getDefaultValue());
	    jsonAttribute.setPlaceholder(attribute.getPlaceholder());
	    jsonAttribute.setRequired(attribute.getRequired());
	    jsonAttribute.setUnique(attribute.getUnique());
		jsonAttribute.setEntity(toJson(attribute.getEntity()));		
		return jsonAttribute;
	}

	public static Attribute toEntity(JsonAttribute jsonAttribute) {
		Attribute attribute = new Attribute();
		
		attribute.setId(jsonAttribute.getId());
		attribute.setName(jsonAttribute.getName());
		attribute.setDisplayName(jsonAttribute.getDisplayName());
		attribute.setMaxLen(jsonAttribute.getMaxLen());
		attribute.setTableFieldName(jsonAttribute.getTableFieldName());
		attribute.setMasc(jsonAttribute.getMasc());
		attribute.setDefaultValue(jsonAttribute.getDefaultValue());
		attribute.setPlaceholder(jsonAttribute.getPlaceholder());
		attribute.setRequired(jsonAttribute.getRequired());
		attribute.setUnique(jsonAttribute.getUnique());
		attribute.setEntity(toEntity(jsonAttribute.getEntity()));					
		return attribute;
	}		
	
	public static List<JsonAttribute> toListJsonAttributes(List<Attribute> all) {
		List<JsonAttribute> jsonAttributes = new ArrayList<JsonAttribute>();
		for (Attribute attribute : all) {
			jsonAttributes.add(toJson(attribute));
		}
		return jsonAttributes;
	}
	//converte de entidade para json
	public static JsonAttributeType toJson(AttributeType attributeType) {
		JsonAttributeType jsonAttributeType = new JsonAttributeType();
		
		jsonAttributeType.setId(attributeType.getId());
	    jsonAttributeType.setClassName(attributeType.getClassName());
	    jsonAttributeType.setFormat(attributeType.getFormat());
		return jsonAttributeType;
	}

	public static AttributeType toEntity(JsonAttributeType jsonAttributeType) {
		AttributeType attributeType = new AttributeType();
		
		attributeType.setId(jsonAttributeType.getId());
		attributeType.setClassName(jsonAttributeType.getClassName());
		attributeType.setFormat(jsonAttributeType.getFormat());
		return attributeType;
	}		
	
	public static List<JsonAttributeType> toListJsonAttributeTypes(List<AttributeType> all) {
		List<JsonAttributeType> jsonAttributeTypes = new ArrayList<JsonAttributeType>();
		for (AttributeType attributeType : all) {
			jsonAttributeTypes.add(toJson(attributeType));
		}
		return jsonAttributeTypes;
	}
	//converte de entidade para json
	public static JsonTheEntity toJson(TheEntity theEntity) {
		JsonTheEntity jsonTheEntity = new JsonTheEntity();
		
		jsonTheEntity.setId(theEntity.getId());
	    jsonTheEntity.setName(theEntity.getName());
	    jsonTheEntity.setDisplayName(theEntity.getDisplayName());
	    jsonTheEntity.setTableName(theEntity.getTableName());
	    jsonTheEntity.setHasOwner(theEntity.getHasOwner());
	    jsonTheEntity.setHasMobile(theEntity.getHasMobile());
		jsonTheEntity.setApplication(toJson(theEntity.getApplication()));		
		return jsonTheEntity;
	}

	public static TheEntity toEntity(JsonTheEntity jsonTheEntity) {
		TheEntity theEntity = new TheEntity();
		
		theEntity.setId(jsonTheEntity.getId());
		theEntity.setName(jsonTheEntity.getName());
		theEntity.setDisplayName(jsonTheEntity.getDisplayName());
		theEntity.setTableName(jsonTheEntity.getTableName());
		theEntity.setHasOwner(jsonTheEntity.getHasOwner());
		theEntity.setHasMobile(jsonTheEntity.getHasMobile());
		theEntity.setApplication(toEntity(jsonTheEntity.getApplication()));					
		return theEntity;
	}		
	
	public static List<JsonTheEntity> toListJsonTheEntitys(List<TheEntity> all) {
		List<JsonTheEntity> jsonTheEntitys = new ArrayList<JsonTheEntity>();
		for (TheEntity theEntity : all) {
			jsonTheEntitys.add(toJson(theEntity));
		}
		return jsonTheEntitys;
	}
	//converte de entidade para json
	public static JsonRelationship toJson(Relationship relationship) {
		JsonRelationship jsonRelationship = new JsonRelationship();
		
		jsonRelationship.setId(relationship.getId());
	    jsonRelationship.setName(relationship.getName());
	    jsonRelationship.setDisplayName(relationship.getDisplayName());
	    jsonRelationship.setOwnerName(relationship.getOwnerName());
	    jsonRelationship.setModel(relationship.getModel());
	    jsonRelationship.setUniDirecional(relationship.getUniDirecional());
		jsonRelationship.setEntity(toJson(relationship.getEntity()));		
		jsonRelationship.setViewApproach(toJson(relationship.getViewApproach()));		
		return jsonRelationship;
	}

	public static Relationship toEntity(JsonRelationship jsonRelationship) {
		Relationship relationship = new Relationship();
		
		relationship.setId(jsonRelationship.getId());
		relationship.setName(jsonRelationship.getName());
		relationship.setDisplayName(jsonRelationship.getDisplayName());
		relationship.setOwnerName(jsonRelationship.getOwnerName());
		relationship.setModel(jsonRelationship.getModel());
		relationship.setUniDirecional(jsonRelationship.getUniDirecional());
		relationship.setEntity(toEntity(jsonRelationship.getEntity()));					
		relationship.setViewApproach(toEntity(jsonRelationship.getViewApproach()));					
		return relationship;
	}		
	
	public static List<JsonRelationship> toListJsonRelationships(List<Relationship> all) {
		List<JsonRelationship> jsonRelationships = new ArrayList<JsonRelationship>();
		for (Relationship relationship : all) {
			jsonRelationships.add(toJson(relationship));
		}
		return jsonRelationships;
	}
	//converte de entidade para json
	public static JsonViewApproach toJson(ViewApproach viewApproach) {
		JsonViewApproach jsonViewApproach = new JsonViewApproach();
		
		jsonViewApproach.setId(viewApproach.getId());
	    jsonViewApproach.setType(viewApproach.getType());
	    jsonViewApproach.setComboId(viewApproach.getComboId());
	    jsonViewApproach.setComboName(viewApproach.getComboName());
	    jsonViewApproach.setComboVal(viewApproach.getComboVal());
	    jsonViewApproach.setTextField(viewApproach.getTextField());
	    jsonViewApproach.setHiddenField(viewApproach.getHiddenField());
		return jsonViewApproach;
	}

	public static ViewApproach toEntity(JsonViewApproach jsonViewApproach) {
		ViewApproach viewApproach = new ViewApproach();
		
		viewApproach.setId(jsonViewApproach.getId());
		viewApproach.setType(jsonViewApproach.getType());
		viewApproach.setComboId(jsonViewApproach.getComboId());
		viewApproach.setComboName(jsonViewApproach.getComboName());
		viewApproach.setComboVal(jsonViewApproach.getComboVal());
		viewApproach.setTextField(jsonViewApproach.getTextField());
		viewApproach.setHiddenField(jsonViewApproach.getHiddenField());
		return viewApproach;
	}		
	
	public static List<JsonViewApproach> toListJsonViewApproachs(List<ViewApproach> all) {
		List<JsonViewApproach> jsonViewApproachs = new ArrayList<JsonViewApproach>();
		for (ViewApproach viewApproach : all) {
			jsonViewApproachs.add(toJson(viewApproach));
		}
		return jsonViewApproachs;
	}
	//converte de entidade para json
	public static JsonBairro toJson(Bairro bairro) {
		JsonBairro jsonBairro = new JsonBairro();
		
		jsonBairro.setId(bairro.getId());
	    jsonBairro.setNome(bairro.getNome());
		jsonBairro.setCidade(toJson(bairro.getCidade()));		
		jsonBairro.setEstado(toJson(bairro.getEstado()));		
		return jsonBairro;
	}

	public static Bairro toEntity(JsonBairro jsonBairro) {
		Bairro bairro = new Bairro();
		
		bairro.setId(jsonBairro.getId());
		bairro.setNome(jsonBairro.getNome());
		bairro.setCidade(toEntity(jsonBairro.getCidade()));					
		bairro.setEstado(toEntity(jsonBairro.getEstado()));					
		return bairro;
	}		
	
	public static List<JsonBairro> toListJsonBairros(List<Bairro> all) {
		List<JsonBairro> jsonBairros = new ArrayList<JsonBairro>();
		for (Bairro bairro : all) {
			jsonBairros.add(toJson(bairro));
		}
		return jsonBairros;
	}
	//converte de entidade para json
	public static JsonCep toJson(Cep cep) {
		JsonCep jsonCep = new JsonCep();
		
		jsonCep.setId(cep.getId());
	    jsonCep.setLogradouro(cep.getLogradouro());
	    jsonCep.setNumero(cep.getNumero());
		jsonCep.setBairro(toJson(cep.getBairro()));		
		jsonCep.setCidade(toJson(cep.getCidade()));		
		jsonCep.setEstado(toJson(cep.getEstado()));		
		return jsonCep;
	}

	public static Cep toEntity(JsonCep jsonCep) {
		Cep cep = new Cep();
		
		cep.setId(jsonCep.getId());
		cep.setLogradouro(jsonCep.getLogradouro());
		cep.setNumero(jsonCep.getNumero());
		cep.setBairro(toEntity(jsonCep.getBairro()));					
		cep.setCidade(toEntity(jsonCep.getCidade()));					
		cep.setEstado(toEntity(jsonCep.getEstado()));					
		return cep;
	}		
	
	public static List<JsonCep> toListJsonCeps(List<Cep> all) {
		List<JsonCep> jsonCeps = new ArrayList<JsonCep>();
		for (Cep cep : all) {
			jsonCeps.add(toJson(cep));
		}
		return jsonCeps;
	}
	//converte de entidade para json
	public static JsonCidade toJson(Cidade cidade) {
		JsonCidade jsonCidade = new JsonCidade();
		
		jsonCidade.setId(cidade.getId());
	    jsonCidade.setNome(cidade.getNome());
	    jsonCidade.setCep(cidade.getCep());
		jsonCidade.setEstado(toJson(cidade.getEstado()));		
		return jsonCidade;
	}

	public static Cidade toEntity(JsonCidade jsonCidade) {
		Cidade cidade = new Cidade();
		
		cidade.setId(jsonCidade.getId());
		cidade.setNome(jsonCidade.getNome());
		cidade.setCep(jsonCidade.getCep());
		cidade.setEstado(toEntity(jsonCidade.getEstado()));					
		return cidade;
	}		
	
	public static List<JsonCidade> toListJsonCidades(List<Cidade> all) {
		List<JsonCidade> jsonCidades = new ArrayList<JsonCidade>();
		for (Cidade cidade : all) {
			jsonCidades.add(toJson(cidade));
		}
		return jsonCidades;
	}
	//converte de entidade para json
	public static JsonEndereco toJson(Endereco endereco) {
		JsonEndereco jsonEndereco = new JsonEndereco();
		
		jsonEndereco.setId(endereco.getId());
	    jsonEndereco.setComplemento(endereco.getComplemento());
	    jsonEndereco.setNumero(endereco.getNumero());
		jsonEndereco.setCep(toJson(endereco.getCep()));		
		return jsonEndereco;
	}

	public static Endereco toEntity(JsonEndereco jsonEndereco) {
		Endereco endereco = new Endereco();
		
		endereco.setId(jsonEndereco.getId());
		endereco.setComplemento(jsonEndereco.getComplemento());
		endereco.setNumero(jsonEndereco.getNumero());
		endereco.setCep(toEntity(jsonEndereco.getCep()));					
		return endereco;
	}		
	
	public static List<JsonEndereco> toListJsonEnderecos(List<Endereco> all) {
		List<JsonEndereco> jsonEnderecos = new ArrayList<JsonEndereco>();
		for (Endereco endereco : all) {
			jsonEnderecos.add(toJson(endereco));
		}
		return jsonEnderecos;
	}
	//converte de entidade para json
	public static JsonEstado toJson(Estado estado) {
		JsonEstado jsonEstado = new JsonEstado();
		
		jsonEstado.setId(estado.getId());
	    jsonEstado.setNome(estado.getNome());
	    jsonEstado.setFaixaCep1Ini(estado.getFaixaCep1Ini());
	    jsonEstado.setFaixaCep1Fim(estado.getFaixaCep1Fim());
	    jsonEstado.setFaixaCep2Ini(estado.getFaixaCep2Ini());
	    jsonEstado.setFaixaCep2Fim(estado.getFaixaCep2Fim());
		return jsonEstado;
	}

	public static Estado toEntity(JsonEstado jsonEstado) {
		Estado estado = new Estado();
		
		estado.setId(jsonEstado.getId());
		estado.setNome(jsonEstado.getNome());
		estado.setFaixaCep1Ini(jsonEstado.getFaixaCep1Ini());
		estado.setFaixaCep1Fim(jsonEstado.getFaixaCep1Fim());
		estado.setFaixaCep2Ini(jsonEstado.getFaixaCep2Ini());
		estado.setFaixaCep2Fim(jsonEstado.getFaixaCep2Fim());
		return estado;
	}		
	
	public static List<JsonEstado> toListJsonEstados(List<Estado> all) {
		List<JsonEstado> jsonEstados = new ArrayList<JsonEstado>();
		for (Estado estado : all) {
			jsonEstados.add(toJson(estado));
		}
		return jsonEstados;
	}
	//converte de entidade para json
	public static JsonPais toJson(Pais pais) {
		JsonPais jsonPais = new JsonPais();
		
		jsonPais.setId(pais.getId());
	    jsonPais.setCodigo(pais.getCodigo());
	    jsonPais.setNome(pais.getNome());
		return jsonPais;
	}

	public static Pais toEntity(JsonPais jsonPais) {
		Pais pais = new Pais();
		
		pais.setId(jsonPais.getId());
		pais.setCodigo(jsonPais.getCodigo());
		pais.setNome(jsonPais.getNome());
		return pais;
	}		
	
	public static List<JsonPais> toListJsonPaiss(List<Pais> all) {
		List<JsonPais> jsonPaiss = new ArrayList<JsonPais>();
		for (Pais pais : all) {
			jsonPaiss.add(toJson(pais));
		}
		return jsonPaiss;
	}
	//converte de entidade para json
	public static JsonClient toJson(Client client) {
		JsonClient jsonClient = new JsonClient();
		
		jsonClient.setId(client.getId());
	    jsonClient.setLogo(client.getLogo());
	    jsonClient.setName(client.getName());
	    jsonClient.setCnpj(client.getCnpj());
	    jsonClient.setPhoneNumber(client.getPhoneNumber());
	    jsonClient.setCorporateName(client.getCorporateName());
		return jsonClient;
	}

	public static Client toEntity(JsonClient jsonClient) {
		Client client = new Client();
		
		client.setId(jsonClient.getId());
		client.setLogo(jsonClient.getLogo());
		client.setName(jsonClient.getName());
		client.setCnpj(jsonClient.getCnpj());
		client.setPhoneNumber(jsonClient.getPhoneNumber());
		client.setCorporateName(jsonClient.getCorporateName());
		return client;
	}		
	
	public static List<JsonClient> toListJsonClients(List<Client> all) {
		List<JsonClient> jsonClients = new ArrayList<JsonClient>();
		for (Client client : all) {
			jsonClients.add(toJson(client));
		}
		return jsonClients;
	}
	//converte de entidade para json
	public static JsonCliente toJson(Cliente cliente) {
		JsonCliente jsonCliente = new JsonCliente();
		
		jsonCliente.setId(cliente.getId());
	    jsonCliente.setNome(cliente.getNome());
	    jsonCliente.setEmail(cliente.getEmail());
	    jsonCliente.setCpf(cliente.getCpf());
	    jsonCliente.setTelefone(cliente.getTelefone());
	    jsonCliente.setOutroTelefone(cliente.getOutroTelefone());
		return jsonCliente;
	}

	public static Cliente toEntity(JsonCliente jsonCliente) {
		Cliente cliente = new Cliente();
		
		cliente.setId(jsonCliente.getId());
		cliente.setNome(jsonCliente.getNome());
		cliente.setEmail(jsonCliente.getEmail());
		cliente.setCpf(jsonCliente.getCpf());
		cliente.setTelefone(jsonCliente.getTelefone());
		cliente.setOutroTelefone(jsonCliente.getOutroTelefone());
		return cliente;
	}		
	
	public static List<JsonCliente> toListJsonClientes(List<Cliente> all) {
		List<JsonCliente> jsonClientes = new ArrayList<JsonCliente>();
		for (Cliente cliente : all) {
			jsonClientes.add(toJson(cliente));
		}
		return jsonClientes;
	}
	//converte de entidade para json
	public static JsonItem toJson(Item item) {
		JsonItem jsonItem = new JsonItem();
		
		jsonItem.setId(item.getId());
	    jsonItem.setName(item.getName());
	    jsonItem.setDescription(item.getDescription());
		jsonItem.setType(toJson(item.getType()));		
		return jsonItem;
	}

	public static Item toEntity(JsonItem jsonItem) {
		Item item = new Item();
		
		item.setId(jsonItem.getId());
		item.setName(jsonItem.getName());
		item.setDescription(jsonItem.getDescription());
		item.setType(toEntity(jsonItem.getType()));					
		return item;
	}		
	
	public static List<JsonItem> toListJsonItems(List<Item> all) {
		List<JsonItem> jsonItems = new ArrayList<JsonItem>();
		for (Item item : all) {
			jsonItems.add(toJson(item));
		}
		return jsonItems;
	}
	//converte de entidade para json
	public static JsonItemType toJson(ItemType itemType) {
		JsonItemType jsonItemType = new JsonItemType();
		
		jsonItemType.setId(itemType.getId());
	    jsonItemType.setName(itemType.getName());
	    jsonItemType.setDescription(itemType.getDescription());
		return jsonItemType;
	}

	public static ItemType toEntity(JsonItemType jsonItemType) {
		ItemType itemType = new ItemType();
		
		itemType.setId(jsonItemType.getId());
		itemType.setName(jsonItemType.getName());
		itemType.setDescription(jsonItemType.getDescription());
		return itemType;
	}		
	
	public static List<JsonItemType> toListJsonItemTypes(List<ItemType> all) {
		List<JsonItemType> jsonItemTypes = new ArrayList<JsonItemType>();
		for (ItemType itemType : all) {
			jsonItemTypes.add(toJson(itemType));
		}
		return jsonItemTypes;
	}
	//converte de entidade para json
	public static JsonOperation toJson(Operation operation) {
		JsonOperation jsonOperation = new JsonOperation();
		
		jsonOperation.setId(operation.getId());
	    jsonOperation.setName(operation.getName());
	    jsonOperation.setCanEdit(operation.getCanEdit());
	    jsonOperation.setCanRead(operation.getCanRead());
	    jsonOperation.setCanUpdate(operation.getCanUpdate());
	    jsonOperation.setCanDelete(operation.getCanDelete());
	    jsonOperation.setCanExecute(operation.getCanExecute());
		return jsonOperation;
	}

	public static Operation toEntity(JsonOperation jsonOperation) {
		Operation operation = new Operation();
		
		operation.setId(jsonOperation.getId());
		operation.setName(jsonOperation.getName());
		operation.setCanEdit(jsonOperation.getCanEdit());
		operation.setCanRead(jsonOperation.getCanRead());
		operation.setCanUpdate(jsonOperation.getCanUpdate());
		operation.setCanDelete(jsonOperation.getCanDelete());
		operation.setCanExecute(jsonOperation.getCanExecute());
		return operation;
	}		
	
	public static List<JsonOperation> toListJsonOperations(List<Operation> all) {
		List<JsonOperation> jsonOperations = new ArrayList<JsonOperation>();
		for (Operation operation : all) {
			jsonOperations.add(toJson(operation));
		}
		return jsonOperations;
	}
	//converte de entidade para json
	public static JsonPermission toJson(Permission permission) {
		JsonPermission jsonPermission = new JsonPermission();
		
		jsonPermission.setId(permission.getId());
	    jsonPermission.setName(permission.getName());
		jsonPermission.setOperation(toJson(permission.getOperation()));		
		jsonPermission.setItem(toJson(permission.getItem()));		
		return jsonPermission;
	}

	public static Permission toEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		
		permission.setId(jsonPermission.getId());
		permission.setName(jsonPermission.getName());
		permission.setOperation(toEntity(jsonPermission.getOperation()));					
		permission.setItem(toEntity(jsonPermission.getItem()));					
		return permission;
	}		
	
	public static List<JsonPermission> toListJsonPermissions(List<Permission> all) {
		List<JsonPermission> jsonPermissions = new ArrayList<JsonPermission>();
		for (Permission permission : all) {
			jsonPermissions.add(toJson(permission));
		}
		return jsonPermissions;
	}
	//converte de entidade para json
	public static JsonRole toJson(Role role) {
		JsonRole jsonRole = new JsonRole();
		
		jsonRole.setId(role.getId());
	    jsonRole.setAuthority(role.getAuthority());
	    jsonRole.setDescription(role.getDescription());
		return jsonRole;
	}

	public static Role toEntity(JsonRole jsonRole) {
		Role role = new Role();
		
		role.setId(jsonRole.getId());
		role.setAuthority(jsonRole.getAuthority());
		role.setDescription(jsonRole.getDescription());
		return role;
	}		
	
	public static List<JsonRole> toListJsonRoles(List<Role> all) {
		List<JsonRole> jsonRoles = new ArrayList<JsonRole>();
		for (Role role : all) {
			jsonRoles.add(toJson(role));
		}
		return jsonRoles;
	}
	//converte de entidade para json
	public static JsonSession toJson(Session session) {
		JsonSession jsonSession = new JsonSession();
		
		jsonSession.setId(session.getId());
	    jsonSession.setName(session.getName());
	    jsonSession.setCreationDate(DateUtil.localDateTimeAsString(session.getCreationDate()));
		jsonSession.setUser(toJson(session.getUser()));		
		return jsonSession;
	}

	public static Session toEntity(JsonSession jsonSession) {
		Session session = new Session();
		
		session.setId(jsonSession.getId());
		session.setName(jsonSession.getName());
	    session.setCreationDate(DateUtil.stringAsLocalDateTime(jsonSession.getCreationDate()));
		session.setUser(toEntity(jsonSession.getUser()));					
		return session;
	}		
	
	public static List<JsonSession> toListJsonSessions(List<Session> all) {
		List<JsonSession> jsonSessions = new ArrayList<JsonSession>();
		for (Session session : all) {
			jsonSessions.add(toJson(session));
		}
		return jsonSessions;
	}
	//converte de entidade para json
	public static JsonUser toJson(User user) {
		JsonUser jsonUser = new JsonUser();
		
		jsonUser.setId(user.getId());
	    jsonUser.setName(user.getName());
	    jsonUser.setUsername(user.getUsername());
	    jsonUser.setPassword(user.getPassword());
	    jsonUser.setEnable(user.getEnable());
	    jsonUser.setImage(user.getImage());
		jsonUser.setOwner(toJson(user.getOwner()));		
		return jsonUser;
	}

	public static User toEntity(JsonUser jsonUser) {
		User user = new User();
		
		user.setId(jsonUser.getId());
		user.setName(jsonUser.getName());
		user.setUsername(jsonUser.getUsername());
		user.setPassword(jsonUser.getPassword());
		user.setEnable(jsonUser.getEnable());
		user.setImage(jsonUser.getImage());
		user.setOwner(toEntity(jsonUser.getOwner()));					
		return user;
	}		
	
	public static List<JsonUser> toListJsonUsers(List<User> all) {
		List<JsonUser> jsonUsers = new ArrayList<JsonUser>();
		for (User user : all) {
			jsonUsers.add(toJson(user));
		}
		return jsonUsers;
	}

	
